#include "scripting/lua-bindings/auto/CCRegisterLuaUIAuto.hpp"
#include "ui/CocosGUI.h"
namespace cocos2d{
void RegisterLuaUIVideoPlayerEventTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,5);
enumTable["PLAYING"]=cocos2d::ui::VideoPlayer::EventType::PLAYING;
enumTable["PAUSED"]=cocos2d::ui::VideoPlayer::EventType::PAUSED;
enumTable["STOPPED"]=cocos2d::ui::VideoPlayer::EventType::STOPPED;
enumTable["COMPLETED"]=cocos2d::ui::VideoPlayer::EventType::COMPLETED;
enumTable["V_ERROR"]=cocos2d::ui::VideoPlayer::EventType::V_ERROR;
lua["ccui"]["VideoPlayer"]["static"]["EventType"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIVideoPlayerStyleTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,2);
enumTable["DEFAULT"]=cocos2d::ui::VideoPlayer::StyleType::DEFAULT;
enumTable["NONE"]=cocos2d::ui::VideoPlayer::StyleType::NONE;
lua["ccui"]["VideoPlayer"]["static"]["StyleType"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIVideoPlayerAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::VideoPlayer).name()] = sol::usertype_traits<cocos2d::ui::VideoPlayer*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::VideoPlayer>("deprecated.cocos2d::ui::VideoPlayer");
dep[sol::base_classes]=sol::bases<cocos2d::ui::Widget,cocos2d::ProtectedNode,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::ui::LayoutParameterProtocol>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::VideoPlayer*>::metatable(),sol::usertype_traits<cocos2d::ui::Widget*>::metatable());
lua["ccui"]["VideoPlayer"]=mt;
mt["__new__"]=static_cast<cocos2d::ui::VideoPlayer*(*)()>(&cocos2d::ui::VideoPlayer::create);
mt["SetFileName"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(const std::string&)>(&cocos2d::ui::VideoPlayer::SetFileName);
mt["set"]["FileName"]=mt["SetFileName"];
mt["GetFileName"]=static_cast<const std::string&(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::GetFileName);
mt["get"]["FileName"]=mt["GetFileName"];
mt["SetURL"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(const std::string&)>(&cocos2d::ui::VideoPlayer::SetURL);
mt["set"]["URL"]=mt["SetURL"];
mt["GetURL"]=static_cast<const std::string&(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::GetURL);
mt["get"]["URL"]=mt["GetURL"];
mt["SetLooping"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(bool)>(&cocos2d::ui::VideoPlayer::SetLooping);
mt["set"]["Looping"]=mt["SetLooping"];
mt["SetUserInputEnabled"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(bool)>(&cocos2d::ui::VideoPlayer::SetUserInputEnabled);
mt["set"]["UserInputEnabled"]=mt["SetUserInputEnabled"];
mt["SetStyle"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(cocos2d::ui::VideoPlayer::StyleType)>(&cocos2d::ui::VideoPlayer::SetStyle);
mt["set"]["Style"]=mt["SetStyle"];
mt["Play"]=static_cast<void(cocos2d::ui::VideoPlayer::*)()>(&cocos2d::ui::VideoPlayer::Play);
mt["Suspend"]=static_cast<void(cocos2d::ui::VideoPlayer::*)()>(&cocos2d::ui::VideoPlayer::Suspend);
mt["Recover"]=static_cast<void(cocos2d::ui::VideoPlayer::*)()>(&cocos2d::ui::VideoPlayer::Recover);
mt["Stop"]=static_cast<void(cocos2d::ui::VideoPlayer::*)()>(&cocos2d::ui::VideoPlayer::Stop);
mt["SeekTo"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(float)>(&cocos2d::ui::VideoPlayer::SeekTo);
mt["IsPlaying"]=static_cast<bool(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::IsPlaying);
mt["get"]["Playing"]=mt["IsPlaying"];
mt["IsLooping"]=static_cast<bool(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::IsLooping);
mt["get"]["Looping"]=mt["IsLooping"];
mt["IsUserInputEnabled"]=static_cast<bool(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::IsUserInputEnabled);
mt["get"]["UserInputEnabled"]=mt["IsUserInputEnabled"];
mt["SetKeepAspectRatioEnabled"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(bool)>(&cocos2d::ui::VideoPlayer::SetKeepAspectRatioEnabled);
mt["set"]["KeepAspectRatioEnabled"]=mt["SetKeepAspectRatioEnabled"];
mt["IsKeepAspectRatioEnabled"]=static_cast<bool(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::IsKeepAspectRatioEnabled);
mt["get"]["KeepAspectRatioEnabled"]=mt["IsKeepAspectRatioEnabled"];
mt["SetFullScreenEnabled"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(bool)>(&cocos2d::ui::VideoPlayer::SetFullScreenEnabled);
mt["set"]["FullScreenEnabled"]=mt["SetFullScreenEnabled"];
mt["IsFullScreenEnabled"]=static_cast<bool(cocos2d::ui::VideoPlayer::*)()const>(&cocos2d::ui::VideoPlayer::IsFullScreenEnabled);
mt["get"]["FullScreenEnabled"]=mt["IsFullScreenEnabled"];
mt["AddEventListener"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(const cocos2d::ui::VideoPlayer::ccVideoPlayerCallback&)>(&cocos2d::ui::VideoPlayer::AddEventListener);
mt["OnPlayEvent"]=static_cast<void(cocos2d::ui::VideoPlayer::*)(int)>(&cocos2d::ui::VideoPlayer::OnPlayEvent);
RegisterLuaUIVideoPlayerEventTypeAuto(lua);
RegisterLuaUIVideoPlayerStyleTypeAuto(lua);
}
void RegisterLuaUIWebViewAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::WebView).name()] = sol::usertype_traits<cocos2d::ui::WebView*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::WebView>("deprecated.cocos2d::ui::WebView");
dep[sol::base_classes]=sol::bases<cocos2d::ui::Widget,cocos2d::ProtectedNode,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::ui::LayoutParameterProtocol>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::WebView*>::metatable(),sol::usertype_traits<cocos2d::ui::Widget*>::metatable());
lua["ccui"]["WebView"]=mt;
mt["__new__"]=static_cast<cocos2d::ui::WebView*(*)()>(&cocos2d::ui::WebView::create);
mt["SetJavascriptInterfaceScheme"]=static_cast<void(cocos2d::ui::WebView::*)(const std::string&)>(&cocos2d::ui::WebView::setJavascriptInterfaceScheme);
mt["set"]["JavascriptInterfaceScheme"]=mt["SetJavascriptInterfaceScheme"];
mt["LoadData"]=static_cast<void(cocos2d::ui::WebView::*)(const cocos2d::Data&,const std::string&,const std::string&,const std::string&)>(&cocos2d::ui::WebView::loadData);
mt["LoadHTMLString"]=sol::overload([](cocos2d::ui::WebView* obj,const std::string& arg0,const std::string& arg1){return obj->loadHTMLString(arg0,arg1);},[](cocos2d::ui::WebView* obj,const std::string& arg0){return obj->loadHTMLString(arg0);});
mt["LoadURL"]=sol::overload(static_cast<void(cocos2d::ui::WebView::*)(const std::string&,bool)>(&cocos2d::ui::WebView::loadURL),static_cast<void(cocos2d::ui::WebView::*)(const std::string&)>(&cocos2d::ui::WebView::loadURL));
mt["LoadFile"]=static_cast<void(cocos2d::ui::WebView::*)(const std::string&)>(&cocos2d::ui::WebView::loadFile);
mt["StopLoading"]=static_cast<void(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::stopLoading);
mt["Reload"]=static_cast<void(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::reload);
mt["CanGoBack"]=static_cast<bool(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::canGoBack);
mt["CanGoForward"]=static_cast<bool(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::canGoForward);
mt["GoBack"]=static_cast<void(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::goBack);
mt["GoForward"]=static_cast<void(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::goForward);
mt["EvaluateJS"]=static_cast<void(cocos2d::ui::WebView::*)(const std::string&)>(&cocos2d::ui::WebView::evaluateJS);
mt["SetScalesPageToFit"]=static_cast<void(cocos2d::ui::WebView::*)(const bool)>(&cocos2d::ui::WebView::setScalesPageToFit);
mt["set"]["ScalesPageToFit"]=mt["SetScalesPageToFit"];
mt["SetOnShouldStartLoading"]=static_cast<void(cocos2d::ui::WebView::*)(const std::function<bool (cocos2d::ui::WebView *, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &)>&)>(&cocos2d::ui::WebView::setOnShouldStartLoading);
mt["set"]["OnShouldStartLoading"]=mt["SetOnShouldStartLoading"];
mt["SetOnDidFinishLoading"]=static_cast<void(cocos2d::ui::WebView::*)(const cocos2d::ui::WebView::ccWebViewCallback&)>(&cocos2d::ui::WebView::setOnDidFinishLoading);
mt["set"]["OnDidFinishLoading"]=mt["SetOnDidFinishLoading"];
mt["SetOnDidFailLoading"]=static_cast<void(cocos2d::ui::WebView::*)(const cocos2d::ui::WebView::ccWebViewCallback&)>(&cocos2d::ui::WebView::setOnDidFailLoading);
mt["set"]["OnDidFailLoading"]=mt["SetOnDidFailLoading"];
mt["SetOnJSCallback"]=static_cast<void(cocos2d::ui::WebView::*)(const cocos2d::ui::WebView::ccWebViewCallback&)>(&cocos2d::ui::WebView::setOnJSCallback);
mt["set"]["OnJSCallback"]=mt["SetOnJSCallback"];
mt["GetOnShouldStartLoading"]=static_cast<std::function<bool (cocos2d::ui::WebView *, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &)>(cocos2d::ui::WebView::*)()const>(&cocos2d::ui::WebView::getOnShouldStartLoading);
mt["get"]["OnShouldStartLoading"]=mt["GetOnShouldStartLoading"];
mt["GetOnDidFinishLoading"]=static_cast<cocos2d::ui::WebView::ccWebViewCallback(cocos2d::ui::WebView::*)()const>(&cocos2d::ui::WebView::getOnDidFinishLoading);
mt["get"]["OnDidFinishLoading"]=mt["GetOnDidFinishLoading"];
mt["GetOnDidFailLoading"]=static_cast<cocos2d::ui::WebView::ccWebViewCallback(cocos2d::ui::WebView::*)()const>(&cocos2d::ui::WebView::getOnDidFailLoading);
mt["get"]["OnDidFailLoading"]=mt["GetOnDidFailLoading"];
mt["GetOnJSCallback"]=static_cast<cocos2d::ui::WebView::ccWebViewCallback(cocos2d::ui::WebView::*)()const>(&cocos2d::ui::WebView::getOnJSCallback);
mt["get"]["OnJSCallback"]=mt["GetOnJSCallback"];
mt["SetBounces"]=static_cast<void(cocos2d::ui::WebView::*)(bool)>(&cocos2d::ui::WebView::setBounces);
mt["set"]["Bounces"]=mt["SetBounces"];
mt["SetOpacityWebView"]=static_cast<void(cocos2d::ui::WebView::*)(float)>(&cocos2d::ui::WebView::setOpacityWebView);
mt["set"]["OpacityWebView"]=mt["SetOpacityWebView"];
mt["GetOpacityWebView"]=static_cast<float(cocos2d::ui::WebView::*)()const>(&cocos2d::ui::WebView::getOpacityWebView);
mt["get"]["OpacityWebView"]=mt["GetOpacityWebView"];
mt["SetBackgroundTransparent"]=static_cast<void(cocos2d::ui::WebView::*)()>(&cocos2d::ui::WebView::setBackgroundTransparent);
}
void RegisterLuaUIScale9SpriteStateAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,2);
enumTable["NORMAL"]=cocos2d::ui::Scale9Sprite::State::NORMAL;
enumTable["GRAY"]=cocos2d::ui::Scale9Sprite::State::GRAY;
lua["ccui"]["Scale9Sprite"]["static"]["State"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIScale9SpriteRenderingTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,2);
enumTable["SIMPLE"]=cocos2d::ui::Scale9Sprite::RenderingType::SIMPLE;
enumTable["SLICE"]=cocos2d::ui::Scale9Sprite::RenderingType::SLICE;
lua["ccui"]["Scale9Sprite"]["static"]["RenderingType"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIScale9SpriteAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::Scale9Sprite).name()] = sol::usertype_traits<cocos2d::ui::Scale9Sprite*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::Scale9Sprite>("deprecated.cocos2d::ui::Scale9Sprite");
dep[sol::base_classes]=sol::bases<cocos2d::Sprite,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::TextureProtocol,cocos2d::BlendProtocol>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::Scale9Sprite*>::metatable(),sol::usertype_traits<cocos2d::Sprite*>::metatable());
lua["ccui"]["Scale9Sprite"]=mt;
mt["__new__"]=sol::overload(static_cast<cocos2d::ui::Scale9Sprite*(*)(const std::string&,const cocos2d::Rect&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::create),static_cast<cocos2d::ui::Scale9Sprite*(*)(const std::string&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::create),static_cast<cocos2d::ui::Scale9Sprite*(*)(const cocos2d::Rect&,const std::string&)>(&cocos2d::ui::Scale9Sprite::create),static_cast<cocos2d::ui::Scale9Sprite*(*)(const std::string&)>(&cocos2d::ui::Scale9Sprite::create),static_cast<cocos2d::ui::Scale9Sprite*(*)()>(&cocos2d::ui::Scale9Sprite::create));
mt["static"]["CreateWithSpriteFrame"]=sol::overload(static_cast<cocos2d::ui::Scale9Sprite*(*)(cocos2d::SpriteFrame*,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::createWithSpriteFrame),static_cast<cocos2d::ui::Scale9Sprite*(*)(cocos2d::SpriteFrame*)>(&cocos2d::ui::Scale9Sprite::createWithSpriteFrame));
mt["static"]["CreateWithSpriteFrameName"]=sol::overload(static_cast<cocos2d::ui::Scale9Sprite*(*)(const std::string&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::createWithSpriteFrameName),static_cast<cocos2d::ui::Scale9Sprite*(*)(const std::string&)>(&cocos2d::ui::Scale9Sprite::createWithSpriteFrameName));
mt["InitWithFile"]=sol::overload(static_cast<bool(cocos2d::ui::Scale9Sprite::*)(const std::string&,const cocos2d::Rect&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::initWithFile),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(const std::string&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::initWithFile),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(const cocos2d::Rect&,const std::string&)>(&cocos2d::ui::Scale9Sprite::initWithFile),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(const std::string&)>(&cocos2d::ui::Scale9Sprite::initWithFile));
mt["InitWithSpriteFrame"]=static_cast<bool(cocos2d::ui::Scale9Sprite::*)(cocos2d::SpriteFrame*,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::initWithSpriteFrame);
mt["InitWithSpriteFrameName"]=sol::overload(static_cast<bool(cocos2d::ui::Scale9Sprite::*)(const std::string&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::initWithSpriteFrameName),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(const std::string&)>(&cocos2d::ui::Scale9Sprite::initWithSpriteFrameName));
mt["Init"]=sol::overload(static_cast<bool(cocos2d::ui::Scale9Sprite::*)(cocos2d::Sprite*,const cocos2d::Rect&,bool,const cocos2d::Vec2&,const cocos2d::Size&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::init),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(cocos2d::Sprite*,const cocos2d::Rect&,bool,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::init),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(cocos2d::Sprite*,const cocos2d::Rect&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::init),static_cast<bool(cocos2d::ui::Scale9Sprite::*)()>(&cocos2d::ui::Scale9Sprite::init));
mt["ResizableSpriteWithCapInsets"]=static_cast<cocos2d::ui::Scale9Sprite*(cocos2d::ui::Scale9Sprite::*)(const cocos2d::Rect&)const>(&cocos2d::ui::Scale9Sprite::resizableSpriteWithCapInsets);
mt["UpdateWithSprite"]=sol::overload(static_cast<bool(cocos2d::ui::Scale9Sprite::*)(cocos2d::Sprite*,const cocos2d::Rect&,bool,const cocos2d::Vec2&,const cocos2d::Size&,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::updateWithSprite),static_cast<bool(cocos2d::ui::Scale9Sprite::*)(cocos2d::Sprite*,const cocos2d::Rect&,bool,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::updateWithSprite));
mt["SetSpriteFrame"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(cocos2d::SpriteFrame*,const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::setSpriteFrame);
mt["SetState"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(cocos2d::ui::Scale9Sprite::State)>(&cocos2d::ui::Scale9Sprite::setState);
mt["set"]["State"]=mt["SetState"];
mt["GetState"]=static_cast<cocos2d::ui::Scale9Sprite::State(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getState);
mt["get"]["State"]=mt["GetState"];
mt["GetOriginalSize"]=static_cast<cocos2d::Size(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getOriginalSize);
mt["get"]["OriginalSize"]=mt["GetOriginalSize"];
mt["SetPreferredSize"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(const cocos2d::Size&)>(&cocos2d::ui::Scale9Sprite::setPreferredSize);
mt["set"]["PreferredSize"]=mt["SetPreferredSize"];
mt["GetPreferredSize"]=static_cast<cocos2d::Size(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getPreferredSize);
mt["get"]["PreferredSize"]=mt["GetPreferredSize"];
mt["SetInsetLeft"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(float)>(&cocos2d::ui::Scale9Sprite::setInsetLeft);
mt["set"]["InsetLeft"]=mt["SetInsetLeft"];
mt["GetInsetLeft"]=static_cast<float(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getInsetLeft);
mt["get"]["InsetLeft"]=mt["GetInsetLeft"];
mt["SetInsetTop"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(float)>(&cocos2d::ui::Scale9Sprite::setInsetTop);
mt["set"]["InsetTop"]=mt["SetInsetTop"];
mt["GetInsetTop"]=static_cast<float(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getInsetTop);
mt["get"]["InsetTop"]=mt["GetInsetTop"];
mt["SetInsetRight"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(float)>(&cocos2d::ui::Scale9Sprite::setInsetRight);
mt["set"]["InsetRight"]=mt["SetInsetRight"];
mt["GetInsetRight"]=static_cast<float(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getInsetRight);
mt["get"]["InsetRight"]=mt["GetInsetRight"];
mt["SetInsetBottom"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(float)>(&cocos2d::ui::Scale9Sprite::setInsetBottom);
mt["set"]["InsetBottom"]=mt["SetInsetBottom"];
mt["GetInsetBottom"]=static_cast<float(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getInsetBottom);
mt["get"]["InsetBottom"]=mt["GetInsetBottom"];
mt["SetScale9Enabled"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(bool)>(&cocos2d::ui::Scale9Sprite::setScale9Enabled);
mt["set"]["Scale9Enabled"]=mt["SetScale9Enabled"];
mt["IsScale9Enabled"]=static_cast<bool(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::isScale9Enabled);
mt["get"]["Scale9Enabled"]=mt["IsScale9Enabled"];
mt["GetSprite"]=static_cast<cocos2d::Sprite*(cocos2d::ui::Scale9Sprite::*)()>(&cocos2d::ui::Scale9Sprite::getSprite);
mt["get"]["Sprite"]=mt["GetSprite"];
mt["CopyTo"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(cocos2d::ui::Scale9Sprite*)const>(&cocos2d::ui::Scale9Sprite::copyTo);
mt["SetRenderingType"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(cocos2d::ui::Scale9Sprite::RenderingType)>(&cocos2d::ui::Scale9Sprite::setRenderingType);
mt["set"]["RenderingType"]=mt["SetRenderingType"];
mt["GetRenderingType"]=static_cast<cocos2d::ui::Scale9Sprite::RenderingType(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getRenderingType);
mt["get"]["RenderingType"]=mt["GetRenderingType"];
mt["SetCapInsets"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)(const cocos2d::Rect&)>(&cocos2d::ui::Scale9Sprite::setCapInsets);
mt["set"]["CapInsets"]=mt["SetCapInsets"];
mt["GetCapInsets"]=static_cast<cocos2d::Rect(cocos2d::ui::Scale9Sprite::*)()const>(&cocos2d::ui::Scale9Sprite::getCapInsets);
mt["get"]["CapInsets"]=mt["GetCapInsets"];
mt["ResetRender"]=static_cast<void(cocos2d::ui::Scale9Sprite::*)()>(&cocos2d::ui::Scale9Sprite::resetRender);
RegisterLuaUIScale9SpriteStateAuto(lua);
RegisterLuaUIScale9SpriteRenderingTypeAuto(lua);
}
void RegisterLuaUIEditBoxEventTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,4);
enumTable["Began"]=cocos2d::ui::EditBox::EventType::Began;
enumTable["Ended"]=cocos2d::ui::EditBox::EventType::Ended;
enumTable["Changed"]=cocos2d::ui::EditBox::EventType::Changed;
enumTable["Return"]=cocos2d::ui::EditBox::EventType::Return;
lua["ccui"]["EditBox"]["static"]["EventType"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIEditBoxKeyboardReturnTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,6);
enumTable["DEFAULT"]=cocos2d::ui::EditBox::KeyboardReturnType::DEFAULT;
enumTable["DONE"]=cocos2d::ui::EditBox::KeyboardReturnType::DONE;
enumTable["SEND"]=cocos2d::ui::EditBox::KeyboardReturnType::SEND;
enumTable["SEARCH"]=cocos2d::ui::EditBox::KeyboardReturnType::SEARCH;
enumTable["GO"]=cocos2d::ui::EditBox::KeyboardReturnType::GO;
enumTable["NEXT"]=cocos2d::ui::EditBox::KeyboardReturnType::NEXT;
lua["ccui"]["EditBox"]["static"]["KeyboardReturnType"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIEditBoxInputModeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,7);
enumTable["ANY"]=cocos2d::ui::EditBox::InputMode::ANY;
enumTable["EMAIL_ADDRESS"]=cocos2d::ui::EditBox::InputMode::EMAIL_ADDRESS;
enumTable["NUMERIC"]=cocos2d::ui::EditBox::InputMode::NUMERIC;
enumTable["PHONE_NUMBER"]=cocos2d::ui::EditBox::InputMode::PHONE_NUMBER;
enumTable["URL"]=cocos2d::ui::EditBox::InputMode::URL;
enumTable["DECIMAL"]=cocos2d::ui::EditBox::InputMode::DECIMAL;
enumTable["SINGLE_LINE"]=cocos2d::ui::EditBox::InputMode::SINGLE_LINE;
lua["ccui"]["EditBox"]["static"]["InputMode"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIEditBoxInputFlagAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,6);
enumTable["PASSWORD"]=cocos2d::ui::EditBox::InputFlag::PASSWORD;
enumTable["SENSITIVE"]=cocos2d::ui::EditBox::InputFlag::SENSITIVE;
enumTable["INITIAL_CAPS_WORD"]=cocos2d::ui::EditBox::InputFlag::INITIAL_CAPS_WORD;
enumTable["INITIAL_CAPS_SENTENCE"]=cocos2d::ui::EditBox::InputFlag::INITIAL_CAPS_SENTENCE;
enumTable["INITIAL_CAPS_ALL_CHARACTERS"]=cocos2d::ui::EditBox::InputFlag::INITIAL_CAPS_ALL_CHARACTERS;
enumTable["LOWERCASE_ALL_CHARACTERS"]=cocos2d::ui::EditBox::InputFlag::LOWERCASE_ALL_CHARACTERS;
lua["ccui"]["EditBox"]["static"]["InputFlag"]=lua.NewEnum(enumTable);
}
void RegisterLuaUIEditBoxAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::EditBox).name()] = sol::usertype_traits<cocos2d::ui::EditBox*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::EditBox>("deprecated.cocos2d::ui::EditBox");
dep[sol::base_classes]=sol::bases<cocos2d::ui::Widget,cocos2d::ProtectedNode,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::ui::LayoutParameterProtocol,cocos2d::IMEDelegate>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::EditBox*>::metatable(),sol::usertype_traits<cocos2d::ui::Widget*>::metatable(),sol::usertype_traits<cocos2d::IMEDelegate*>::metatable());
lua["ccui"]["EditBox"]=mt;
mt["__new__"]=sol::overload([](const cocos2d::Size& arg0,const std::string& arg1,const std::string& arg2,const std::string& arg3,cocos2d::ui::Widget::TextureResType arg4){return cocos2d::ui::EditBox::create(arg0,arg1,arg2,arg3,arg4);},[](const cocos2d::Size& arg0,const std::string& arg1,const std::string& arg2,const std::string& arg3){return cocos2d::ui::EditBox::create(arg0,arg1,arg2,arg3);},[](const cocos2d::Size& arg0,cocos2d::ui::Scale9Sprite* arg1,cocos2d::ui::Scale9Sprite* arg2,cocos2d::ui::Scale9Sprite* arg3){return cocos2d::ui::EditBox::create(arg0,arg1,arg2,arg3);},[](const cocos2d::Size& arg0,const std::string& arg1,const std::string& arg2){return cocos2d::ui::EditBox::create(arg0,arg1,arg2);},static_cast<cocos2d::ui::EditBox*(*)(const cocos2d::Size&,const std::string&,cocos2d::ui::Widget::TextureResType)>(&cocos2d::ui::EditBox::create),[](const cocos2d::Size& arg0,cocos2d::ui::Scale9Sprite* arg1,cocos2d::ui::Scale9Sprite* arg2){return cocos2d::ui::EditBox::create(arg0,arg1,arg2);},[](const cocos2d::Size& arg0,const std::string& arg1){return cocos2d::ui::EditBox::create(arg0,arg1);},[](const cocos2d::Size& arg0,cocos2d::ui::Scale9Sprite* arg1){return cocos2d::ui::EditBox::create(arg0,arg1);});
mt["InitWithSizeAndBackgroundSprite"]=sol::overload(static_cast<bool(cocos2d::ui::EditBox::*)(const cocos2d::Size&,cocos2d::ui::Scale9Sprite*,cocos2d::ui::Scale9Sprite*,cocos2d::ui::Scale9Sprite*)>(&cocos2d::ui::EditBox::initWithSizeAndBackgroundSprite),[](cocos2d::ui::EditBox* obj,const cocos2d::Size& arg0,const std::string& arg1,cocos2d::ui::Widget::TextureResType arg2){return obj->initWithSizeAndBackgroundSprite(arg0,arg1,arg2);},static_cast<bool(cocos2d::ui::EditBox::*)(const cocos2d::Size&,cocos2d::ui::Scale9Sprite*)>(&cocos2d::ui::EditBox::initWithSizeAndBackgroundSprite),[](cocos2d::ui::EditBox* obj,const cocos2d::Size& arg0,const std::string& arg1){return obj->initWithSizeAndBackgroundSprite(arg0,arg1);});
mt["InitWithSizeAndTexture"]=sol::overload([](cocos2d::ui::EditBox* obj,const cocos2d::Size& arg0,const std::string& arg1,const std::string& arg2,const std::string& arg3,cocos2d::ui::Widget::TextureResType arg4){return obj->initWithSizeAndTexture(arg0,arg1,arg2,arg3,arg4);},[](cocos2d::ui::EditBox* obj,const cocos2d::Size& arg0,const std::string& arg1,const std::string& arg2,const std::string& arg3){return obj->initWithSizeAndTexture(arg0,arg1,arg2,arg3);},[](cocos2d::ui::EditBox* obj,const cocos2d::Size& arg0,const std::string& arg1,const std::string& arg2){return obj->initWithSizeAndTexture(arg0,arg1,arg2);},[](cocos2d::ui::EditBox* obj,const cocos2d::Size& arg0,const std::string& arg1){return obj->initWithSizeAndTexture(arg0,arg1);});
mt["LoadTextures"]=sol::overload([](cocos2d::ui::EditBox* obj,const std::string& arg0,const std::string& arg1,const std::string& arg2,cocos2d::ui::Widget::TextureResType arg3){return obj->loadTextures(arg0,arg1,arg2,arg3);},[](cocos2d::ui::EditBox* obj,const std::string& arg0,const std::string& arg1,const std::string& arg2){return obj->loadTextures(arg0,arg1,arg2);},[](cocos2d::ui::EditBox* obj,const std::string& arg0,const std::string& arg1){return obj->loadTextures(arg0,arg1);});
mt["LoadTextureNormal"]=sol::overload([](cocos2d::ui::EditBox* obj,const std::string& arg0,cocos2d::ui::Widget::TextureResType arg1){return obj->loadTextureNormal(arg0,arg1);},[](cocos2d::ui::EditBox* obj,const std::string& arg0){return obj->loadTextureNormal(arg0);});
mt["LoadTexturePressed"]=sol::overload([](cocos2d::ui::EditBox* obj,const std::string& arg0,cocos2d::ui::Widget::TextureResType arg1){return obj->loadTexturePressed(arg0,arg1);},[](cocos2d::ui::EditBox* obj,const std::string& arg0){return obj->loadTexturePressed(arg0);});
mt["LoadTextureDisabled"]=sol::overload([](cocos2d::ui::EditBox* obj,const std::string& arg0,cocos2d::ui::Widget::TextureResType arg1){return obj->loadTextureDisabled(arg0,arg1);},[](cocos2d::ui::EditBox* obj,const std::string& arg0){return obj->loadTextureDisabled(arg0);});
mt["SetCapInsets"]=static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Rect&)>(&cocos2d::ui::EditBox::setCapInsets);
mt["set"]["CapInsets"]=mt["SetCapInsets"];
mt["SetCapInsetsNormalRenderer"]=static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Rect&)>(&cocos2d::ui::EditBox::setCapInsetsNormalRenderer);
mt["set"]["CapInsetsNormalRenderer"]=mt["SetCapInsetsNormalRenderer"];
mt["GetCapInsetsNormalRenderer"]=static_cast<const cocos2d::Rect&(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getCapInsetsNormalRenderer);
mt["get"]["CapInsetsNormalRenderer"]=mt["GetCapInsetsNormalRenderer"];
mt["SetCapInsetsPressedRenderer"]=static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Rect&)>(&cocos2d::ui::EditBox::setCapInsetsPressedRenderer);
mt["set"]["CapInsetsPressedRenderer"]=mt["SetCapInsetsPressedRenderer"];
mt["GetCapInsetsPressedRenderer"]=static_cast<const cocos2d::Rect&(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getCapInsetsPressedRenderer);
mt["get"]["CapInsetsPressedRenderer"]=mt["GetCapInsetsPressedRenderer"];
mt["SetCapInsetsDisabledRenderer"]=static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Rect&)>(&cocos2d::ui::EditBox::setCapInsetsDisabledRenderer);
mt["set"]["CapInsetsDisabledRenderer"]=mt["SetCapInsetsDisabledRenderer"];
mt["GetCapInsetsDisabledRenderer"]=static_cast<const cocos2d::Rect&(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getCapInsetsDisabledRenderer);
mt["get"]["CapInsetsDisabledRenderer"]=mt["GetCapInsetsDisabledRenderer"];
mt["SetDelegate"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::ui::EditBoxDelegate*)>(&cocos2d::ui::EditBox::setDelegate);
mt["set"]["Delegate"]=mt["SetDelegate"];
mt["GetDelegate"]=static_cast<cocos2d::ui::EditBoxDelegate*(cocos2d::ui::EditBox::*)()>(&cocos2d::ui::EditBox::getDelegate);
mt["get"]["Delegate"]=mt["GetDelegate"];
mt["SetEventHandler"]=static_cast<void(cocos2d::ui::EditBox::*)(const std::function<void (cocos2d::ui::EditBox *, cocos2d::ui::EditBox::EventType)>&)>(&cocos2d::ui::EditBox::SetEventHandler);
mt["set"]["EventHandler"]=mt["SetEventHandler"];
mt["GetEventHandler"]=static_cast<const std::function<void (cocos2d::ui::EditBox *, cocos2d::ui::EditBox::EventType)>&(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::GetEventHandler);
mt["get"]["EventHandler"]=mt["GetEventHandler"];
mt["SetText"]=static_cast<void(cocos2d::ui::EditBox::*)(const char*)>(&cocos2d::ui::EditBox::setText);
mt["set"]["Text"]=mt["SetText"];
mt["GetText"]=static_cast<const char*(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getText);
mt["get"]["Text"]=mt["GetText"];
mt["SetFont"]=static_cast<void(cocos2d::ui::EditBox::*)(const char*,int)>(&cocos2d::ui::EditBox::setFont);
mt["SetFontName"]=static_cast<void(cocos2d::ui::EditBox::*)(const char*)>(&cocos2d::ui::EditBox::setFontName);
mt["set"]["FontName"]=mt["SetFontName"];
mt["GetFontName"]=static_cast<const char*(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getFontName);
mt["get"]["FontName"]=mt["GetFontName"];
mt["SetFontSize"]=static_cast<void(cocos2d::ui::EditBox::*)(int)>(&cocos2d::ui::EditBox::setFontSize);
mt["set"]["FontSize"]=mt["SetFontSize"];
mt["GetFontSize"]=static_cast<int(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getFontSize);
mt["get"]["FontSize"]=mt["GetFontSize"];
mt["SetFontColor"]=sol::overload(static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Color4B&)>(&cocos2d::ui::EditBox::setFontColor),static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Color3B&)>(&cocos2d::ui::EditBox::setFontColor));
mt["set"]["FontColor"]=mt["SetFontColor"];
mt["GetFontColor"]=static_cast<const cocos2d::Color4B&(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getFontColor);
mt["get"]["FontColor"]=mt["GetFontColor"];
mt["SetPlaceholderFont"]=static_cast<void(cocos2d::ui::EditBox::*)(const char*,int)>(&cocos2d::ui::EditBox::setPlaceholderFont);
mt["SetPlaceholderFontName"]=static_cast<void(cocos2d::ui::EditBox::*)(const char*)>(&cocos2d::ui::EditBox::setPlaceholderFontName);
mt["set"]["PlaceholderFontName"]=mt["SetPlaceholderFontName"];
mt["GetPlaceholderFontName"]=static_cast<const char*(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getPlaceholderFontName);
mt["get"]["PlaceholderFontName"]=mt["GetPlaceholderFontName"];
mt["SetPlaceholderFontSize"]=static_cast<void(cocos2d::ui::EditBox::*)(int)>(&cocos2d::ui::EditBox::setPlaceholderFontSize);
mt["set"]["PlaceholderFontSize"]=mt["SetPlaceholderFontSize"];
mt["GetPlaceholderFontSize"]=static_cast<int(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getPlaceholderFontSize);
mt["get"]["PlaceholderFontSize"]=mt["GetPlaceholderFontSize"];
mt["SetPlaceholderFontColor"]=sol::overload(static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Color4B&)>(&cocos2d::ui::EditBox::setPlaceholderFontColor),static_cast<void(cocos2d::ui::EditBox::*)(const cocos2d::Color3B&)>(&cocos2d::ui::EditBox::setPlaceholderFontColor));
mt["set"]["PlaceholderFontColor"]=mt["SetPlaceholderFontColor"];
mt["GetPlaceholderFontColor"]=static_cast<const cocos2d::Color4B&(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getPlaceholderFontColor);
mt["get"]["PlaceholderFontColor"]=mt["GetPlaceholderFontColor"];
mt["SetPlaceHolder"]=static_cast<void(cocos2d::ui::EditBox::*)(const char*)>(&cocos2d::ui::EditBox::setPlaceHolder);
mt["set"]["PlaceHolder"]=mt["SetPlaceHolder"];
mt["GetPlaceHolder"]=static_cast<const char*(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getPlaceHolder);
mt["get"]["PlaceHolder"]=mt["GetPlaceHolder"];
mt["SetInputMode"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::ui::EditBox::InputMode)>(&cocos2d::ui::EditBox::setInputMode);
mt["set"]["InputMode"]=mt["SetInputMode"];
mt["GetInputMode"]=static_cast<cocos2d::ui::EditBox::InputMode(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getInputMode);
mt["get"]["InputMode"]=mt["GetInputMode"];
mt["SetMaxLength"]=static_cast<void(cocos2d::ui::EditBox::*)(int)>(&cocos2d::ui::EditBox::setMaxLength);
mt["set"]["MaxLength"]=mt["SetMaxLength"];
mt["GetMaxLength"]=static_cast<int(cocos2d::ui::EditBox::*)()>(&cocos2d::ui::EditBox::getMaxLength);
mt["get"]["MaxLength"]=mt["GetMaxLength"];
mt["SetInputFlag"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::ui::EditBox::InputFlag)>(&cocos2d::ui::EditBox::setInputFlag);
mt["set"]["InputFlag"]=mt["SetInputFlag"];
mt["GetInputFlag"]=static_cast<cocos2d::ui::EditBox::InputFlag(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getInputFlag);
mt["get"]["InputFlag"]=mt["GetInputFlag"];
mt["SetReturnType"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::ui::EditBox::KeyboardReturnType)>(&cocos2d::ui::EditBox::setReturnType);
mt["set"]["ReturnType"]=mt["SetReturnType"];
mt["GetReturnType"]=static_cast<cocos2d::ui::EditBox::KeyboardReturnType(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getReturnType);
mt["get"]["ReturnType"]=mt["GetReturnType"];
mt["SetTextHorizontalAlignment"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::TextHAlignment)>(&cocos2d::ui::EditBox::setTextHorizontalAlignment);
mt["set"]["TextHorizontalAlignment"]=mt["SetTextHorizontalAlignment"];
mt["GetTextHorizontalAlignment"]=static_cast<cocos2d::TextHAlignment(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::getTextHorizontalAlignment);
mt["get"]["TextHorizontalAlignment"]=mt["GetTextHorizontalAlignment"];
mt["KeyboardWillShow"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::IMEKeyboardNotificationInfo&)>(&cocos2d::ui::EditBox::keyboardWillShow);
mt["KeyboardDidShow"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::IMEKeyboardNotificationInfo&)>(&cocos2d::ui::EditBox::keyboardDidShow);
mt["KeyboardWillHide"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::IMEKeyboardNotificationInfo&)>(&cocos2d::ui::EditBox::keyboardWillHide);
mt["KeyboardDidHide"]=static_cast<void(cocos2d::ui::EditBox::*)(cocos2d::IMEKeyboardNotificationInfo&)>(&cocos2d::ui::EditBox::keyboardDidHide);
mt["OpenKeyboard"]=static_cast<void(cocos2d::ui::EditBox::*)()const>(&cocos2d::ui::EditBox::openKeyboard);
RegisterLuaUIEditBoxEventTypeAuto(lua);
RegisterLuaUIEditBoxKeyboardReturnTypeAuto(lua);
RegisterLuaUIEditBoxInputModeAuto(lua);
RegisterLuaUIEditBoxInputFlagAuto(lua);
}
void RegisterLuaUILayoutComponentHorizontalEdgeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,4);
enumTable["None"]=cocos2d::ui::LayoutComponent::HorizontalEdge::None;
enumTable["Left"]=cocos2d::ui::LayoutComponent::HorizontalEdge::Left;
enumTable["Right"]=cocos2d::ui::LayoutComponent::HorizontalEdge::Right;
enumTable["Center"]=cocos2d::ui::LayoutComponent::HorizontalEdge::Center;
lua["ccui"]["LayoutComponent"]["static"]["HorizontalEdge"]=lua.NewEnum(enumTable);
}
void RegisterLuaUILayoutComponentVerticalEdgeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,4);
enumTable["None"]=cocos2d::ui::LayoutComponent::VerticalEdge::None;
enumTable["Bottom"]=cocos2d::ui::LayoutComponent::VerticalEdge::Bottom;
enumTable["Top"]=cocos2d::ui::LayoutComponent::VerticalEdge::Top;
enumTable["Center"]=cocos2d::ui::LayoutComponent::VerticalEdge::Center;
lua["ccui"]["LayoutComponent"]["static"]["VerticalEdge"]=lua.NewEnum(enumTable);
}
void RegisterLuaUILayoutComponentAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::LayoutComponent).name()] = sol::usertype_traits<cocos2d::ui::LayoutComponent*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::LayoutComponent>("deprecated.cocos2d::ui::LayoutComponent");
dep[sol::base_classes]=sol::bases<cocos2d::Component,cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::LayoutComponent*>::metatable(),sol::usertype_traits<cocos2d::Component*>::metatable());
lua["ccui"]["LayoutComponent"]=mt;
mt["__new__"]=static_cast<cocos2d::ui::LayoutComponent*(*)()>(&cocos2d::ui::LayoutComponent::create);
mt["static"]["BindLayoutComponent"]=static_cast<cocos2d::ui::LayoutComponent*(*)(cocos2d::Node*)>(&cocos2d::ui::LayoutComponent::bindLayoutComponent);
mt["SetUsingPercentContentSize"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setUsingPercentContentSize);
mt["set"]["UsingPercentContentSize"]=mt["SetUsingPercentContentSize"];
mt["GetUsingPercentContentSize"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getUsingPercentContentSize);
mt["get"]["UsingPercentContentSize"]=mt["GetUsingPercentContentSize"];
mt["SetPercentContentSize"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(const cocos2d::Vec2&)>(&cocos2d::ui::LayoutComponent::setPercentContentSize);
mt["set"]["PercentContentSize"]=mt["SetPercentContentSize"];
mt["GetPercentContentSize"]=static_cast<cocos2d::Vec2(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getPercentContentSize);
mt["get"]["PercentContentSize"]=mt["GetPercentContentSize"];
mt["GetAnchorPosition"]=static_cast<const cocos2d::Point&(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getAnchorPosition);
mt["get"]["AnchorPosition"]=mt["GetAnchorPosition"];
mt["SetAnchorPosition"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(const cocos2d::Point&)>(&cocos2d::ui::LayoutComponent::setAnchorPosition);
mt["set"]["AnchorPosition"]=mt["SetAnchorPosition"];
mt["GetPosition"]=static_cast<const cocos2d::Point&(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getPosition);
mt["get"]["Position"]=mt["GetPosition"];
mt["SetPosition"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(const cocos2d::Point&)>(&cocos2d::ui::LayoutComponent::setPosition);
mt["set"]["Position"]=mt["SetPosition"];
mt["IsPositionPercentXEnabled"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::isPositionPercentXEnabled);
mt["get"]["PositionPercentXEnabled"]=mt["IsPositionPercentXEnabled"];
mt["SetPositionPercentXEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setPositionPercentXEnabled);
mt["set"]["PositionPercentXEnabled"]=mt["SetPositionPercentXEnabled"];
mt["GetPositionPercentX"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getPositionPercentX);
mt["get"]["PositionPercentX"]=mt["GetPositionPercentX"];
mt["SetPositionPercentX"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setPositionPercentX);
mt["set"]["PositionPercentX"]=mt["SetPositionPercentX"];
mt["IsPositionPercentYEnabled"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::isPositionPercentYEnabled);
mt["get"]["PositionPercentYEnabled"]=mt["IsPositionPercentYEnabled"];
mt["SetPositionPercentYEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setPositionPercentYEnabled);
mt["set"]["PositionPercentYEnabled"]=mt["SetPositionPercentYEnabled"];
mt["GetPositionPercentY"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getPositionPercentY);
mt["get"]["PositionPercentY"]=mt["GetPositionPercentY"];
mt["SetPositionPercentY"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setPositionPercentY);
mt["set"]["PositionPercentY"]=mt["SetPositionPercentY"];
mt["GetHorizontalEdge"]=static_cast<cocos2d::ui::LayoutComponent::HorizontalEdge(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getHorizontalEdge);
mt["get"]["HorizontalEdge"]=mt["GetHorizontalEdge"];
mt["SetHorizontalEdge"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(cocos2d::ui::LayoutComponent::HorizontalEdge)>(&cocos2d::ui::LayoutComponent::setHorizontalEdge);
mt["set"]["HorizontalEdge"]=mt["SetHorizontalEdge"];
mt["GetVerticalEdge"]=static_cast<cocos2d::ui::LayoutComponent::VerticalEdge(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getVerticalEdge);
mt["get"]["VerticalEdge"]=mt["GetVerticalEdge"];
mt["SetVerticalEdge"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(cocos2d::ui::LayoutComponent::VerticalEdge)>(&cocos2d::ui::LayoutComponent::setVerticalEdge);
mt["set"]["VerticalEdge"]=mt["SetVerticalEdge"];
mt["GetLeftMargin"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getLeftMargin);
mt["get"]["LeftMargin"]=mt["GetLeftMargin"];
mt["SetLeftMargin"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setLeftMargin);
mt["set"]["LeftMargin"]=mt["SetLeftMargin"];
mt["GetRightMargin"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getRightMargin);
mt["get"]["RightMargin"]=mt["GetRightMargin"];
mt["SetRightMargin"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setRightMargin);
mt["set"]["RightMargin"]=mt["SetRightMargin"];
mt["GetTopMargin"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getTopMargin);
mt["get"]["TopMargin"]=mt["GetTopMargin"];
mt["SetTopMargin"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setTopMargin);
mt["set"]["TopMargin"]=mt["SetTopMargin"];
mt["GetBottomMargin"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getBottomMargin);
mt["get"]["BottomMargin"]=mt["GetBottomMargin"];
mt["SetBottomMargin"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setBottomMargin);
mt["set"]["BottomMargin"]=mt["SetBottomMargin"];
mt["GetSize"]=static_cast<const cocos2d::Size&(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getSize);
mt["get"]["Size"]=mt["GetSize"];
mt["SetSize"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(const cocos2d::Size&)>(&cocos2d::ui::LayoutComponent::setSize);
mt["set"]["Size"]=mt["SetSize"];
mt["IsPercentWidthEnabled"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::isPercentWidthEnabled);
mt["get"]["PercentWidthEnabled"]=mt["IsPercentWidthEnabled"];
mt["SetPercentWidthEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setPercentWidthEnabled);
mt["set"]["PercentWidthEnabled"]=mt["SetPercentWidthEnabled"];
mt["GetSizeWidth"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getSizeWidth);
mt["get"]["SizeWidth"]=mt["GetSizeWidth"];
mt["SetSizeWidth"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setSizeWidth);
mt["set"]["SizeWidth"]=mt["SetSizeWidth"];
mt["GetPercentWidth"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getPercentWidth);
mt["get"]["PercentWidth"]=mt["GetPercentWidth"];
mt["SetPercentWidth"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setPercentWidth);
mt["set"]["PercentWidth"]=mt["SetPercentWidth"];
mt["IsPercentHeightEnabled"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::isPercentHeightEnabled);
mt["get"]["PercentHeightEnabled"]=mt["IsPercentHeightEnabled"];
mt["SetPercentHeightEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setPercentHeightEnabled);
mt["set"]["PercentHeightEnabled"]=mt["SetPercentHeightEnabled"];
mt["GetSizeHeight"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getSizeHeight);
mt["get"]["SizeHeight"]=mt["GetSizeHeight"];
mt["SetSizeHeight"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setSizeHeight);
mt["set"]["SizeHeight"]=mt["SetSizeHeight"];
mt["GetPercentHeight"]=static_cast<float(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::getPercentHeight);
mt["get"]["PercentHeight"]=mt["GetPercentHeight"];
mt["SetPercentHeight"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(float)>(&cocos2d::ui::LayoutComponent::setPercentHeight);
mt["set"]["PercentHeight"]=mt["SetPercentHeight"];
mt["IsStretchWidthEnabled"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::isStretchWidthEnabled);
mt["get"]["StretchWidthEnabled"]=mt["IsStretchWidthEnabled"];
mt["SetStretchWidthEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setStretchWidthEnabled);
mt["set"]["StretchWidthEnabled"]=mt["SetStretchWidthEnabled"];
mt["IsStretchHeightEnabled"]=static_cast<bool(cocos2d::ui::LayoutComponent::*)()const>(&cocos2d::ui::LayoutComponent::isStretchHeightEnabled);
mt["get"]["StretchHeightEnabled"]=mt["IsStretchHeightEnabled"];
mt["SetStretchHeightEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setStretchHeightEnabled);
mt["set"]["StretchHeightEnabled"]=mt["SetStretchHeightEnabled"];
mt["SetPercentOnlyEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setPercentOnlyEnabled);
mt["set"]["PercentOnlyEnabled"]=mt["SetPercentOnlyEnabled"];
mt["SetActiveEnabled"]=static_cast<void(cocos2d::ui::LayoutComponent::*)(bool)>(&cocos2d::ui::LayoutComponent::setActiveEnabled);
mt["set"]["ActiveEnabled"]=mt["SetActiveEnabled"];
mt["RefreshLayout"]=static_cast<void(cocos2d::ui::LayoutComponent::*)()>(&cocos2d::ui::LayoutComponent::refreshLayout);
RegisterLuaUILayoutComponentHorizontalEdgeAuto(lua);
RegisterLuaUILayoutComponentVerticalEdgeAuto(lua);
}
void RegisterLuaUITabHeaderAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::TabHeader).name()] = sol::usertype_traits<cocos2d::ui::TabHeader*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::TabHeader>("deprecated.cocos2d::ui::TabHeader");
dep[sol::base_classes]=sol::bases<cocos2d::ui::AbstractCheckButton,cocos2d::ui::Widget,cocos2d::ProtectedNode,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::ui::LayoutParameterProtocol>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::TabHeader*>::metatable(),sol::usertype_traits<cocos2d::ui::AbstractCheckButton*>::metatable());
lua["ccui"]["TabHeader"]=mt;
mt["__new__"]=sol::overload([](const std::string& arg0,const std::string& arg1,const std::string& arg2,const std::string& arg3,const std::string& arg4,const std::string& arg5,cocos2d::ui::Widget::TextureResType arg6){return cocos2d::ui::TabHeader::create(arg0,arg1,arg2,arg3,arg4,arg5,arg6);},[](const std::string& arg0,const std::string& arg1,const std::string& arg2,const std::string& arg3,const std::string& arg4,const std::string& arg5){return cocos2d::ui::TabHeader::create(arg0,arg1,arg2,arg3,arg4,arg5);},[](const std::string& arg0,const std::string& arg1,const std::string& arg2,cocos2d::ui::Widget::TextureResType arg3){return cocos2d::ui::TabHeader::create(arg0,arg1,arg2,arg3);},[](const std::string& arg0,const std::string& arg1,const std::string& arg2){return cocos2d::ui::TabHeader::create(arg0,arg1,arg2);},static_cast<cocos2d::ui::TabHeader*(*)()>(&cocos2d::ui::TabHeader::create));
mt["GetTitleRenderer"]=static_cast<cocos2d::Label*(cocos2d::ui::TabHeader::*)()const>(&cocos2d::ui::TabHeader::getTitleRenderer);
mt["get"]["TitleRenderer"]=mt["GetTitleRenderer"];
mt["SetTitleText"]=static_cast<void(cocos2d::ui::TabHeader::*)(const std::string&)>(&cocos2d::ui::TabHeader::setTitleText);
mt["set"]["TitleText"]=mt["SetTitleText"];
mt["GetTitleText"]=static_cast<std::string(cocos2d::ui::TabHeader::*)()const>(&cocos2d::ui::TabHeader::getTitleText);
mt["get"]["TitleText"]=mt["GetTitleText"];
mt["SetTitleColor"]=static_cast<void(cocos2d::ui::TabHeader::*)(const cocos2d::Color4B&)>(&cocos2d::ui::TabHeader::setTitleColor);
mt["set"]["TitleColor"]=mt["SetTitleColor"];
mt["GetTitleColor"]=static_cast<const cocos2d::Color4B&(cocos2d::ui::TabHeader::*)()const>(&cocos2d::ui::TabHeader::getTitleColor);
mt["get"]["TitleColor"]=mt["GetTitleColor"];
mt["SetTitleFontSize"]=static_cast<void(cocos2d::ui::TabHeader::*)(float)>(&cocos2d::ui::TabHeader::setTitleFontSize);
mt["set"]["TitleFontSize"]=mt["SetTitleFontSize"];
mt["GetTitleFontSize"]=static_cast<float(cocos2d::ui::TabHeader::*)()const>(&cocos2d::ui::TabHeader::getTitleFontSize);
mt["get"]["TitleFontSize"]=mt["GetTitleFontSize"];
mt["SetTitleFontName"]=static_cast<void(cocos2d::ui::TabHeader::*)(const std::string&)>(&cocos2d::ui::TabHeader::setTitleFontName);
mt["set"]["TitleFontName"]=mt["SetTitleFontName"];
mt["GetTitleFontName"]=static_cast<std::string(cocos2d::ui::TabHeader::*)()const>(&cocos2d::ui::TabHeader::getTitleFontName);
mt["get"]["TitleFontName"]=mt["GetTitleFontName"];
mt["GetIndexInTabControl"]=static_cast<int(cocos2d::ui::TabHeader::*)()const>(&cocos2d::ui::TabHeader::getIndexInTabControl);
mt["get"]["IndexInTabControl"]=mt["GetIndexInTabControl"];
}
void RegisterLuaUITabControlDockAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,4);
enumTable["TOP"]=cocos2d::ui::TabControl::Dock::TOP;
enumTable["LEFT"]=cocos2d::ui::TabControl::Dock::LEFT;
enumTable["BOTTOM"]=cocos2d::ui::TabControl::Dock::BOTTOM;
enumTable["RIGHT"]=cocos2d::ui::TabControl::Dock::RIGHT;
lua["ccui"]["TabControl"]["static"]["Dock"]=lua.NewEnum(enumTable);
}
void RegisterLuaUITabControlEventTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,1);
enumTable["SELECT_CHANGED"]=cocos2d::ui::TabControl::EventType::SELECT_CHANGED;
lua["ccui"]["TabControl"]["static"]["EventType"]=lua.NewEnum(enumTable);
}
void RegisterLuaUITabControlAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::TabControl).name()] = sol::usertype_traits<cocos2d::ui::TabControl*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::TabControl>("deprecated.cocos2d::ui::TabControl");
dep[sol::base_classes]=sol::bases<cocos2d::ui::Widget,cocos2d::ProtectedNode,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::ui::LayoutParameterProtocol>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::TabControl*>::metatable(),sol::usertype_traits<cocos2d::ui::Widget*>::metatable());
lua["ccui"]["TabControl"]=mt;
mt["__new__"]=static_cast<cocos2d::ui::TabControl*(*)()>(&cocos2d::ui::TabControl::create);
mt["RemoveTab"]=static_cast<void(cocos2d::ui::TabControl::*)(int)>(&cocos2d::ui::TabControl::removeTab);
mt["SetSelectTab"]=sol::overload(static_cast<void(cocos2d::ui::TabControl::*)(cocos2d::ui::TabHeader*)>(&cocos2d::ui::TabControl::setSelectTab),static_cast<void(cocos2d::ui::TabControl::*)(int)>(&cocos2d::ui::TabControl::setSelectTab));
mt["set"]["SelectTab"]=mt["SetSelectTab"];
mt["GetTabHeader"]=static_cast<cocos2d::ui::TabHeader*(cocos2d::ui::TabControl::*)(int)const>(&cocos2d::ui::TabControl::getTabHeader);
mt["GetTabContainer"]=static_cast<cocos2d::ui::Layout*(cocos2d::ui::TabControl::*)(int)const>(&cocos2d::ui::TabControl::getTabContainer);
mt["InsertTab"]=static_cast<void(cocos2d::ui::TabControl::*)(int,cocos2d::ui::TabHeader*,cocos2d::ui::Layout*)>(&cocos2d::ui::TabControl::insertTab);
mt["GetTabCount"]=static_cast<size_t(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::getTabCount);
mt["get"]["TabCount"]=mt["GetTabCount"];
mt["GetSelectedTabIndex"]=static_cast<int(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::getSelectedTabIndex);
mt["get"]["SelectedTabIndex"]=mt["GetSelectedTabIndex"];
mt["IndexOfTabHeader"]=static_cast<int(cocos2d::ui::TabControl::*)(const cocos2d::ui::TabHeader*)const>(&cocos2d::ui::TabControl::indexOfTabHeader);
mt["SetTabChangedEventListener"]=static_cast<void(cocos2d::ui::TabControl::*)(const cocos2d::ui::TabControl::ccTabControlCallback&)>(&cocos2d::ui::TabControl::setTabChangedEventListener);
mt["set"]["TabChangedEventListener"]=mt["SetTabChangedEventListener"];
mt["SetHeaderWidth"]=static_cast<void(cocos2d::ui::TabControl::*)(float)>(&cocos2d::ui::TabControl::setHeaderWidth);
mt["set"]["HeaderWidth"]=mt["SetHeaderWidth"];
mt["GetHeaderWidth"]=static_cast<float(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::getHeaderWidth);
mt["get"]["HeaderWidth"]=mt["GetHeaderWidth"];
mt["SetHeaderHeight"]=static_cast<void(cocos2d::ui::TabControl::*)(float)>(&cocos2d::ui::TabControl::setHeaderHeight);
mt["set"]["HeaderHeight"]=mt["SetHeaderHeight"];
mt["GetHeaderHeight"]=static_cast<int(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::getHeaderHeight);
mt["get"]["HeaderHeight"]=mt["GetHeaderHeight"];
mt["IgnoreHeadersTextureSize"]=static_cast<void(cocos2d::ui::TabControl::*)(bool)>(&cocos2d::ui::TabControl::ignoreHeadersTextureSize);
mt["IsIgnoreHeadersTextureSize"]=static_cast<bool(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::isIgnoreHeadersTextureSize);
mt["get"]["IgnoreHeadersTextureSize"]=mt["IsIgnoreHeadersTextureSize"];
mt["SetHeaderSelectedZoom"]=static_cast<void(cocos2d::ui::TabControl::*)(float)>(&cocos2d::ui::TabControl::setHeaderSelectedZoom);
mt["set"]["HeaderSelectedZoom"]=mt["SetHeaderSelectedZoom"];
mt["GetHeaderSelectedZoom"]=static_cast<float(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::getHeaderSelectedZoom);
mt["get"]["HeaderSelectedZoom"]=mt["GetHeaderSelectedZoom"];
mt["SetHeaderDockPlace"]=static_cast<void(cocos2d::ui::TabControl::*)(cocos2d::ui::TabControl::Dock)>(&cocos2d::ui::TabControl::setHeaderDockPlace);
mt["set"]["HeaderDockPlace"]=mt["SetHeaderDockPlace"];
mt["GetHeaderDockPlace"]=static_cast<cocos2d::ui::TabControl::Dock(cocos2d::ui::TabControl::*)()const>(&cocos2d::ui::TabControl::getHeaderDockPlace);
mt["get"]["HeaderDockPlace"]=mt["GetHeaderDockPlace"];
RegisterLuaUITabControlDockAuto(lua);
RegisterLuaUITabControlEventTypeAuto(lua);
}
void RegisterLuaUIQrCodeAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::ui::QrCode).name()] = sol::usertype_traits<cocos2d::ui::QrCode*>::metatable();
auto dep=lua.new_usertype<cocos2d::ui::QrCode>("deprecated.cocos2d::ui::QrCode");
dep[sol::base_classes]=sol::bases<cocos2d::ui::Widget,cocos2d::ProtectedNode,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::ui::LayoutParameterProtocol>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::ui::QrCode*>::metatable(),sol::usertype_traits<cocos2d::ui::Widget*>::metatable());
lua["ccui"]["QrCode"]=mt;
mt["__new__"]=sol::overload(static_cast<cocos2d::ui::QrCode*(*)(const std::string&)>(&cocos2d::ui::QrCode::create),static_cast<cocos2d::ui::QrCode*(*)()>(&cocos2d::ui::QrCode::create));
mt["LoadCodeByString"]=static_cast<bool(cocos2d::ui::QrCode::*)(const std::string&)>(&cocos2d::ui::QrCode::LoadCodeByString);
mt["SetOriginSize"]=static_cast<void(cocos2d::ui::QrCode::*)()>(&cocos2d::ui::QrCode::SetOriginSize);
}
}
