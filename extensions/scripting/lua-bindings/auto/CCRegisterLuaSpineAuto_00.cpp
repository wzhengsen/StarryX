#include "scripting/lua-bindings/auto/CCRegisterLuaSpineAuto.hpp"
#include "spine/spine-cocos2dx.h"
void RegisterLuaSpineSkeletonRendererAuto(cocos2d::extension::Lua& lua){
auto mt=lua.NewUserType<spine::SkeletonRenderer>("sp","SkeletonRenderer",false);
cocos2d::extension::Lua::SetBases(mt,sol::bases<cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::BlendProtocol>());
mt.set_function(sol::meta_function::construct,static_cast<spine::SkeletonRenderer*(*)()>(&spine::SkeletonRenderer::create));
mt.set_function("CreateWithSkeleton",sol::overload([](spine::SkeletonRenderer* obj,spine::Skeleton* arg0){return obj->createWithSkeleton(arg0);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1){return obj->createWithSkeleton(arg0,arg1);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1,bool arg2){return obj->createWithSkeleton(arg0,arg1,arg2);}));
mt.set_function("CreateWithData",sol::overload([](spine::SkeletonRenderer* obj,spine::SkeletonData* arg0){return obj->createWithData(arg0);},[](spine::SkeletonRenderer* obj,spine::SkeletonData* arg0,bool arg1){return obj->createWithData(arg0,arg1);}));
mt.set_function("CreateWithFile",sol::overload([](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1){return obj->createWithFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->createWithFile(arg0,arg1,arg2);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1){return obj->createWithFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->createWithFile(arg0,arg1,arg2);}));
mt.set_function("Update",static_cast<void(spine::SkeletonRenderer::*)(float)>(&spine::SkeletonRenderer::update));
mt.set_function("Draw",static_cast<void(spine::SkeletonRenderer::*)(cocos2d::Renderer*,const cocos2d::Mat4&,uint32_t)>(&spine::SkeletonRenderer::draw));
mt.set_function("GetBoundingBox",static_cast<cocos2d::Rect(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getBoundingBox));
mt.set_function("OnEnter",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::onEnter));
mt.set_function("OnExit",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::onExit));
mt.set_function("GetSkeleton",static_cast<spine::Skeleton*(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getSkeleton));
mt.set_function("SetTimeScale",static_cast<void(spine::SkeletonRenderer::*)(float)>(&spine::SkeletonRenderer::setTimeScale));
mt.set_function("GetTimeScale",static_cast<float(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getTimeScale));
mt.set_function("SetDebugSlotsEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugSlotsEnabled));
mt.set_function("GetDebugSlotsEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugSlotsEnabled));
mt.set_function("SetDebugBonesEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugBonesEnabled));
mt.set_function("GetDebugBonesEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugBonesEnabled));
mt.set_function("SetDebugMeshesEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugMeshesEnabled));
mt.set_function("GetDebugMeshesEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugMeshesEnabled));
mt.set_function("SetDebugBoundingRectEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugBoundingRectEnabled));
mt.set_function("GetDebugBoundingRectEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugBoundingRectEnabled));
mt.set_function("UpdateWorldTransform",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::updateWorldTransform));
mt.set_function("SetToSetupPose",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::setToSetupPose));
mt.set_function("SetBonesToSetupPose",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::setBonesToSetupPose));
mt.set_function("SetSlotsToSetupPose",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::setSlotsToSetupPose));
mt.set_function("FindBone",static_cast<spine::Bone*(spine::SkeletonRenderer::*)(const std::string&)const>(&spine::SkeletonRenderer::findBone));
mt.set_function("FindSlot",static_cast<spine::Slot*(spine::SkeletonRenderer::*)(const std::string&)const>(&spine::SkeletonRenderer::findSlot));
mt.set_function("SetSkin",sol::overload(static_cast<void(spine::SkeletonRenderer::*)(const char*)>(&spine::SkeletonRenderer::setSkin),static_cast<void(spine::SkeletonRenderer::*)(const std::string&)>(&spine::SkeletonRenderer::setSkin)));
mt.set_function("GetAttachment",static_cast<spine::Attachment*(spine::SkeletonRenderer::*)(const std::string&,const std::string&)const>(&spine::SkeletonRenderer::getAttachment));
mt.set_function("SetAttachment",sol::overload(static_cast<bool(spine::SkeletonRenderer::*)(const std::string&,const char*)>(&spine::SkeletonRenderer::setAttachment),static_cast<bool(spine::SkeletonRenderer::*)(const std::string&,const std::string&)>(&spine::SkeletonRenderer::setAttachment)));
mt.set_function("SetTwoColorTint",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setTwoColorTint));
mt.set_function("IsTwoColorTint",static_cast<bool(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::isTwoColorTint));
mt.set_function("SetVertexEffect",static_cast<void(spine::SkeletonRenderer::*)(spine::VertexEffect*)>(&spine::SkeletonRenderer::setVertexEffect));
mt.set_function("SetSlotsRange",static_cast<void(spine::SkeletonRenderer::*)(int,int)>(&spine::SkeletonRenderer::setSlotsRange));
mt.set_function("SetBlendFunc",static_cast<void(spine::SkeletonRenderer::*)(const cocos2d::BlendFunc&)>(&spine::SkeletonRenderer::setBlendFunc));
mt.set_function("GetBlendFunc",static_cast<const cocos2d::BlendFunc&(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getBlendFunc));
mt.set_function("SetOpacityModifyRGB",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setOpacityModifyRGB));
mt.set_function("IsOpacityModifyRGB",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::isOpacityModifyRGB));
}
void RegisterLuaSpineSkeletonAnimationAuto(cocos2d::extension::Lua& lua){
auto mt=lua.NewUserType<spine::SkeletonAnimation>("sp","SkeletonAnimation",false);
cocos2d::extension::Lua::SetBases(mt,sol::bases<spine::SkeletonRenderer,cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject,cocos2d::BlendProtocol>());
mt.set_function(sol::meta_function::construct,static_cast<spine::SkeletonAnimation*(*)()>(&spine::SkeletonAnimation::create));
mt.set_function("CreateWithData",sol::overload([](spine::SkeletonAnimation* obj,spine::SkeletonData* arg0){return obj->createWithData(arg0);},[](spine::SkeletonAnimation* obj,spine::SkeletonData* arg0,bool arg1){return obj->createWithData(arg0,arg1);}));
mt.set_function("CreateWithJsonFile",sol::overload([](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1){return obj->createWithJsonFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->createWithJsonFile(arg0,arg1,arg2);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1){return obj->createWithJsonFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->createWithJsonFile(arg0,arg1,arg2);}));
mt.set_function("CreateWithBinaryFile",sol::overload([](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1){return obj->createWithBinaryFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->createWithBinaryFile(arg0,arg1,arg2);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1){return obj->createWithBinaryFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->createWithBinaryFile(arg0,arg1,arg2);}));
mt.set_function("Update",static_cast<void(spine::SkeletonAnimation::*)(float)>(&spine::SkeletonAnimation::update));
mt.set_function("Draw",static_cast<void(spine::SkeletonAnimation::*)(cocos2d::Renderer*,const cocos2d::Mat4&,uint32_t)>(&spine::SkeletonAnimation::draw));
mt.set_function("SetAnimationStateData",static_cast<void(spine::SkeletonAnimation::*)(spine::AnimationStateData*)>(&spine::SkeletonAnimation::setAnimationStateData));
mt.set_function("SetMix",static_cast<void(spine::SkeletonAnimation::*)(const std::string&,const std::string&,float)>(&spine::SkeletonAnimation::setMix));
mt.set_function("SetAnimation",static_cast<spine::TrackEntry*(spine::SkeletonAnimation::*)(int,const std::string&,bool)>(&spine::SkeletonAnimation::setAnimation));
mt.set_function("AddAnimation",sol::overload([](spine::SkeletonAnimation* obj,int arg0,const std::string& arg1,bool arg2){return obj->addAnimation(arg0,arg1,arg2);},[](spine::SkeletonAnimation* obj,int arg0,const std::string& arg1,bool arg2,float arg3){return obj->addAnimation(arg0,arg1,arg2,arg3);}));
mt.set_function("SetEmptyAnimation",static_cast<spine::TrackEntry*(spine::SkeletonAnimation::*)(int,float)>(&spine::SkeletonAnimation::setEmptyAnimation));
mt.set_function("SetEmptyAnimations",static_cast<void(spine::SkeletonAnimation::*)(float)>(&spine::SkeletonAnimation::setEmptyAnimations));
mt.set_function("AddEmptyAnimation",sol::overload([](spine::SkeletonAnimation* obj,int arg0,float arg1){return obj->addEmptyAnimation(arg0,arg1);},[](spine::SkeletonAnimation* obj,int arg0,float arg1,float arg2){return obj->addEmptyAnimation(arg0,arg1,arg2);}));
mt.set_function("FindAnimation",static_cast<spine::Animation*(spine::SkeletonAnimation::*)(const std::string&)const>(&spine::SkeletonAnimation::findAnimation));
mt.set_function("GetCurrent",sol::overload([](spine::SkeletonAnimation* obj){return obj->getCurrent();},[](spine::SkeletonAnimation* obj,int arg0){return obj->getCurrent(arg0);}));
mt.set_function("ClearTracks",static_cast<void(spine::SkeletonAnimation::*)()>(&spine::SkeletonAnimation::clearTracks));
mt.set_function("ClearTrack",sol::overload([](spine::SkeletonAnimation* obj){return obj->clearTrack();},[](spine::SkeletonAnimation* obj,int arg0){return obj->clearTrack(arg0);}));
mt.set_function("SetStartListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::StartListener&)>(&spine::SkeletonAnimation::setStartListener));
mt.set_function("SetInterruptListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::InterruptListener&)>(&spine::SkeletonAnimation::setInterruptListener));
mt.set_function("SetEndListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::EndListener&)>(&spine::SkeletonAnimation::setEndListener));
mt.set_function("SetDisposeListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::DisposeListener&)>(&spine::SkeletonAnimation::setDisposeListener));
mt.set_function("SetCompleteListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::CompleteListener&)>(&spine::SkeletonAnimation::setCompleteListener));
mt.set_function("SetEventListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::EventListener&)>(&spine::SkeletonAnimation::setEventListener));
mt.set_function("SetPreUpdateWorldTransformsListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::UpdateWorldTransformsListener&)>(&spine::SkeletonAnimation::setPreUpdateWorldTransformsListener));
mt.set_function("SetPostUpdateWorldTransformsListener",static_cast<void(spine::SkeletonAnimation::*)(const spine::UpdateWorldTransformsListener&)>(&spine::SkeletonAnimation::setPostUpdateWorldTransformsListener));
mt.set_function("SetTrackStartListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const spine::StartListener&)>(&spine::SkeletonAnimation::setTrackStartListener));
mt.set_function("SetTrackInterruptListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const spine::InterruptListener&)>(&spine::SkeletonAnimation::setTrackInterruptListener));
mt.set_function("SetTrackEndListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const spine::EndListener&)>(&spine::SkeletonAnimation::setTrackEndListener));
mt.set_function("SetTrackDisposeListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const spine::DisposeListener&)>(&spine::SkeletonAnimation::setTrackDisposeListener));
mt.set_function("SetTrackCompleteListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const spine::CompleteListener&)>(&spine::SkeletonAnimation::setTrackCompleteListener));
mt.set_function("SetTrackEventListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const spine::EventListener&)>(&spine::SkeletonAnimation::setTrackEventListener));
mt.set_function("OnAnimationStateEvent",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,spine::EventType,spine::Event*)>(&spine::SkeletonAnimation::onAnimationStateEvent));
mt.set_function("OnTrackEntryEvent",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,spine::EventType,spine::Event*)>(&spine::SkeletonAnimation::onTrackEntryEvent));
mt.set_function("GetState",static_cast<spine::AnimationState*(spine::SkeletonAnimation::*)()const>(&spine::SkeletonAnimation::getState));
mt.set_function("SetUpdateOnlyIfVisible",static_cast<void(spine::SkeletonAnimation::*)(bool)>(&spine::SkeletonAnimation::setUpdateOnlyIfVisible));
}
