#include "scripting/lua-bindings/auto/CCRegisterLuaSpineAuto.hpp"
#include "spine/spine-cocos2dx.h"
static void RegisterLuaSkeletonRenderer(cocos2d::Lua& lua){
lua.NewUserType<spine::SkeletonRenderer,cocos2d::Node,cocos2d::Ref,cocos2d::LuaObject,cocos2d::BlendProtocol>("sp","SkeletonRenderer"
,"getBoundingBox",static_cast<cocos2d::Rect(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getBoundingBox)
,"onEnter",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::onEnter)
,"onExit",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::onExit)
,"getSkeleton",static_cast<spine::Skeleton*(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getSkeleton)
,"setTimeScale",static_cast<void(spine::SkeletonRenderer::*)(float)>(&spine::SkeletonRenderer::setTimeScale)
,"getTimeScale",static_cast<float(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getTimeScale)
,"setDebugSlotsEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugSlotsEnabled)
,"getDebugSlotsEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugSlotsEnabled)
,"setDebugBonesEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugBonesEnabled)
,"getDebugBonesEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugBonesEnabled)
,"setDebugMeshesEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugMeshesEnabled)
,"getDebugMeshesEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugMeshesEnabled)
,"setDebugBoundingRectEnabled",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setDebugBoundingRectEnabled)
,"getDebugBoundingRectEnabled",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getDebugBoundingRectEnabled)
,"updateWorldTransform",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::updateWorldTransform)
,"setToSetupPose",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::setToSetupPose)
,"setBonesToSetupPose",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::setBonesToSetupPose)
,"setSlotsToSetupPose",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::setSlotsToSetupPose)
,"setSkin",sol::overload(static_cast<void(spine::SkeletonRenderer::*)(const char*)>(&spine::SkeletonRenderer::setSkin),static_cast<void(spine::SkeletonRenderer::*)(const std::string&)>(&spine::SkeletonRenderer::setSkin))
,"setTwoColorTint",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setTwoColorTint)
,"isTwoColorTint",static_cast<bool(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::isTwoColorTint)
,"setVertexEffect",static_cast<void(spine::SkeletonRenderer::*)(spine::VertexEffect*)>(&spine::SkeletonRenderer::setVertexEffect)
,"setSlotsRange",static_cast<void(spine::SkeletonRenderer::*)(int,int)>(&spine::SkeletonRenderer::setSlotsRange)
,"setBlendFunc",static_cast<void(spine::SkeletonRenderer::*)(const cocos2d::BlendFunc&)>(&spine::SkeletonRenderer::setBlendFunc)
,"getBlendFunc",static_cast<const cocos2d::BlendFunc&(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::getBlendFunc)
,"setOpacityModifyRGB",static_cast<void(spine::SkeletonRenderer::*)(bool)>(&spine::SkeletonRenderer::setOpacityModifyRGB)
,"isOpacityModifyRGB",static_cast<bool(spine::SkeletonRenderer::*)()const>(&spine::SkeletonRenderer::isOpacityModifyRGB)
,"initWithSkeleton",sol::overload([](spine::SkeletonRenderer* obj,spine::Skeleton* arg0){return obj->initWithSkeleton(arg0);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1){return obj->initWithSkeleton(arg0,arg1);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1,bool arg2){return obj->initWithSkeleton(arg0,arg1,arg2);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1,bool arg2,bool arg3){return obj->initWithSkeleton(arg0,arg1,arg2,arg3);})
,"initWithData",sol::overload([](spine::SkeletonRenderer* obj,spine::SkeletonData* arg0){return obj->initWithData(arg0);},[](spine::SkeletonRenderer* obj,spine::SkeletonData* arg0,bool arg1){return obj->initWithData(arg0,arg1);})
,"initWithJsonFile",sol::overload([](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1){return obj->initWithJsonFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->initWithJsonFile(arg0,arg1,arg2);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1){return obj->initWithJsonFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->initWithJsonFile(arg0,arg1,arg2);})
,"initWithBinaryFile",sol::overload([](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1){return obj->initWithBinaryFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->initWithBinaryFile(arg0,arg1,arg2);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1){return obj->initWithBinaryFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->initWithBinaryFile(arg0,arg1,arg2);})
,"initialize",static_cast<void(spine::SkeletonRenderer::*)()>(&spine::SkeletonRenderer::initialize)
,"new",static_cast<spine::SkeletonRenderer*(*)()>(&spine::SkeletonRenderer::create)
,"createWithSkeleton",sol::overload([](spine::SkeletonRenderer* obj,spine::Skeleton* arg0){return obj->createWithSkeleton(arg0);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1){return obj->createWithSkeleton(arg0,arg1);},[](spine::SkeletonRenderer* obj,spine::Skeleton* arg0,bool arg1,bool arg2){return obj->createWithSkeleton(arg0,arg1,arg2);})
,"createWithFile",sol::overload([](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1){return obj->createWithFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->createWithFile(arg0,arg1,arg2);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1){return obj->createWithFile(arg0,arg1);},[](spine::SkeletonRenderer* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->createWithFile(arg0,arg1,arg2);})
);}
static void RegisterLuaSkeletonAnimation(cocos2d::Lua& lua){
lua.NewUserType<spine::SkeletonAnimation,spine::SkeletonRenderer,cocos2d::Node,cocos2d::Ref,cocos2d::LuaObject,cocos2d::BlendProtocol>("sp","SkeletonAnimation"
,"setMix",static_cast<void(spine::SkeletonAnimation::*)(const std::string&,const std::string&,float)>(&spine::SkeletonAnimation::setMix)
,"setEmptyAnimation",static_cast<spine::TrackEntry*(spine::SkeletonAnimation::*)(int,float)>(&spine::SkeletonAnimation::setEmptyAnimation)
,"setEmptyAnimations",static_cast<void(spine::SkeletonAnimation::*)(float)>(&spine::SkeletonAnimation::setEmptyAnimations)
,"addEmptyAnimation",sol::overload([](spine::SkeletonAnimation* obj,int arg0,float arg1){return obj->addEmptyAnimation(arg0,arg1);},[](spine::SkeletonAnimation* obj,int arg0,float arg1,float arg2){return obj->addEmptyAnimation(arg0,arg1,arg2);})
,"findAnimation",static_cast<spine::Animation*(spine::SkeletonAnimation::*)(const std::string&)const>(&spine::SkeletonAnimation::findAnimation)
,"clearTracks",static_cast<void(spine::SkeletonAnimation::*)()>(&spine::SkeletonAnimation::clearTracks)
,"clearTrack",sol::overload([](spine::SkeletonAnimation* obj){return obj->clearTrack();},[](spine::SkeletonAnimation* obj,int arg0){return obj->clearTrack(arg0);})
,"setStartListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setStartListener)
,"setInterruptListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setInterruptListener)
,"setEndListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setEndListener)
,"setDisposeListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setDisposeListener)
,"setCompleteListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setCompleteListener)
,"setEventListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::TrackEntry *, spine::Event *)>&)>(&spine::SkeletonAnimation::setEventListener)
,"setPreUpdateWorldTransformsListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::SkeletonAnimation *)>&)>(&spine::SkeletonAnimation::setPreUpdateWorldTransformsListener)
,"setPostUpdateWorldTransformsListener",static_cast<void(spine::SkeletonAnimation::*)(const std::function<void (spine::SkeletonAnimation *)>&)>(&spine::SkeletonAnimation::setPostUpdateWorldTransformsListener)
,"setTrackStartListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setTrackStartListener)
,"setTrackInterruptListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setTrackInterruptListener)
,"setTrackEndListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setTrackEndListener)
,"setTrackDisposeListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setTrackDisposeListener)
,"setTrackCompleteListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const std::function<void (spine::TrackEntry *)>&)>(&spine::SkeletonAnimation::setTrackCompleteListener)
,"setTrackEventListener",static_cast<void(spine::SkeletonAnimation::*)(spine::TrackEntry*,const std::function<void (spine::TrackEntry *, spine::Event *)>&)>(&spine::SkeletonAnimation::setTrackEventListener)
,"setUpdateOnlyIfVisible",static_cast<void(spine::SkeletonAnimation::*)(bool)>(&spine::SkeletonAnimation::setUpdateOnlyIfVisible)
,"initialize",static_cast<void(spine::SkeletonAnimation::*)()>(&spine::SkeletonAnimation::initialize)
,"new",static_cast<spine::SkeletonAnimation*(*)()>(&spine::SkeletonAnimation::create)
,"createWithJsonFile",sol::overload([](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1){return obj->createWithJsonFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->createWithJsonFile(arg0,arg1,arg2);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1){return obj->createWithJsonFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->createWithJsonFile(arg0,arg1,arg2);})
,"createWithBinaryFile",sol::overload([](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1){return obj->createWithBinaryFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,const std::string& arg1,float arg2){return obj->createWithBinaryFile(arg0,arg1,arg2);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1){return obj->createWithBinaryFile(arg0,arg1);},[](spine::SkeletonAnimation* obj,const std::string& arg0,spine::Atlas* arg1,float arg2){return obj->createWithBinaryFile(arg0,arg1,arg2);})
);}
void RegisterLuaSpineAuto(cocos2d::Lua& lua) {
RegisterLuaSkeletonRenderer(lua);
RegisterLuaSkeletonAnimation(lua);
}
