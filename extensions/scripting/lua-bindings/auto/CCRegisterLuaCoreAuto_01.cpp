#include "scripting/lua-bindings/auto/CCRegisterLuaCoreAuto.hpp"
#include "cocos2d.h"
#include "2d/CCProtectedNode.h"
#include "base/CCAsyncTaskPool.h"
#include "renderer/CCRenderer.h"
#include "renderer/CCPipelineDescriptor.h"
#include "renderer/backend/RenderTarget.h"
#include "navmesh/CCNavMesh.h"
#include "ui/UIWidget.h"
#include "base/TGAlib.h"
#include "network/CCConnection.h"
void RegisterLuaCoreComponentAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::Component).name()] = sol::usertype_traits<cocos2d::Component*>::metatable();
auto dep=lua.new_usertype<cocos2d::Component>("deprecated.cocos2d::Component");
dep[sol::base_classes]=sol::bases<cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::Component*>::metatable(),sol::usertype_traits<cocos2d::Ref*>::metatable());
lua["cc"]["Component"]=mt;
mt["__new__"]=static_cast<cocos2d::Component*(*)()>(&cocos2d::Component::create);
mt["Init"]=static_cast<bool(cocos2d::Component::*)()>(&cocos2d::Component::init);
mt["IsEnabled"]=static_cast<bool(cocos2d::Component::*)()const>(&cocos2d::Component::isEnabled);
mt["get"]["Enabled"]=mt["IsEnabled"];
mt["SetEnabled"]=static_cast<void(cocos2d::Component::*)(bool)>(&cocos2d::Component::setEnabled);
mt["set"]["Enabled"]=mt["SetEnabled"];
mt["GetName"]=static_cast<const std::string&(cocos2d::Component::*)()const>(&cocos2d::Component::getName);
mt["get"]["Name"]=mt["GetName"];
mt["SetName"]=static_cast<void(cocos2d::Component::*)(const std::string&)>(&cocos2d::Component::setName);
mt["set"]["Name"]=mt["SetName"];
mt["GetOwner"]=static_cast<cocos2d::Node*(cocos2d::Component::*)()const>(&cocos2d::Component::getOwner);
mt["get"]["Owner"]=mt["GetOwner"];
mt["SetOwner"]=static_cast<void(cocos2d::Component::*)(cocos2d::Node*)>(&cocos2d::Component::setOwner);
mt["set"]["Owner"]=mt["SetOwner"];
mt["Update"]=static_cast<void(cocos2d::Component::*)(float)>(&cocos2d::Component::update);
mt["Serialize"]=static_cast<bool(cocos2d::Component::*)(void*)>(&cocos2d::Component::serialize);
mt["SetEnterHandler"]=static_cast<void(cocos2d::Component::*)(const std::function<void (cocos2d::Component *)>&)>(&cocos2d::Component::SetEnterHandler);
mt["set"]["EnterHandler"]=mt["SetEnterHandler"];
mt["SetExitHandler"]=static_cast<void(cocos2d::Component::*)(const std::function<void (cocos2d::Component *)>&)>(&cocos2d::Component::SetExitHandler);
mt["set"]["ExitHandler"]=mt["SetExitHandler"];
mt["SetAddHandler"]=static_cast<void(cocos2d::Component::*)(const std::function<void (cocos2d::Component *)>&)>(&cocos2d::Component::SetAddHandler);
mt["set"]["AddHandler"]=mt["SetAddHandler"];
mt["SetRemoveHandler"]=static_cast<void(cocos2d::Component::*)(const std::function<void (cocos2d::Component *)>&)>(&cocos2d::Component::SetRemoveHandler);
mt["set"]["RemoveHandler"]=mt["SetRemoveHandler"];
}
void RegisterLuaCorePHYSICSSHAPE_MATERIAL_DEFAULTAuto(cocos2d::extension::Lua& lua) {
sol::table pTable = lua["cc"];
pTable["PHYSICSSHAPE_MATERIAL_DEFAULT"] = cocos2d::PHYSICSSHAPE_MATERIAL_DEFAULT;
}

void RegisterLuaCorePHYSICSBODY_MATERIAL_DEFAULTAuto(cocos2d::extension::Lua& lua) {
sol::table pTable = lua["cc"];
pTable["PHYSICSBODY_MATERIAL_DEFAULT"] = cocos2d::PHYSICSBODY_MATERIAL_DEFAULT;
}

void RegisterLuaCoreNode_AE_fbd064b4c8d215365796c22d16742590_Auto(cocos2d::extension::Lua& lua) {
sol::table pTable = lua["cc"];
pTable = pTable["Node"];
pTable["static"]["FLAGS_TRANSFORM_DIRTY"] = cocos2d::Node::FLAGS_TRANSFORM_DIRTY;
pTable["static"]["FLAGS_CONTENT_SIZE_DIRTY"] = cocos2d::Node::FLAGS_CONTENT_SIZE_DIRTY;
pTable["static"]["FLAGS_RENDER_AS_3D"] = cocos2d::Node::FLAGS_RENDER_AS_3D;
pTable["static"]["FLAGS_DIRTY_MASK"] = cocos2d::Node::FLAGS_DIRTY_MASK;
}
void RegisterLuaCoreNodeAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::Node).name()] = sol::usertype_traits<cocos2d::Node*>::metatable();
auto dep=lua.new_usertype<cocos2d::Node>("deprecated.cocos2d::Node");
dep[sol::base_classes]=sol::bases<cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::Node*>::metatable(),sol::usertype_traits<cocos2d::Ref*>::metatable());
lua["cc"]["Node"]=mt;
mt["__new__"]=static_cast<cocos2d::Node*(*)()>(&cocos2d::Node::create);
mt["static"]["GetAttachedNodeCount"]=static_cast<int(*)()>(&cocos2d::Node::getAttachedNodeCount);
mt["static"]["get"]["AttachedNodeCount"]=mt["GetAttachedNodeCount"];
mt["GetDescription"]=static_cast<std::string(cocos2d::Node::*)()const>(&cocos2d::Node::getDescription);
mt["get"]["Description"]=mt["GetDescription"];
mt["SetLocalZOrder"]=static_cast<void(cocos2d::Node::*)(int32_t)>(&cocos2d::Node::setLocalZOrder);
mt["set"]["LocalZOrder"]=mt["SetLocalZOrder"];
mt["UpdateOrderOfArrival"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::updateOrderOfArrival);
mt["GetLocalZOrder"]=static_cast<int32_t(cocos2d::Node::*)()const>(&cocos2d::Node::getLocalZOrder);
mt["get"]["LocalZOrder"]=mt["GetLocalZOrder"];
mt["SetGlobalZOrder"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setGlobalZOrder);
mt["set"]["GlobalZOrder"]=mt["SetGlobalZOrder"];
mt["GetGlobalZOrder"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getGlobalZOrder);
mt["get"]["GlobalZOrder"]=mt["GetGlobalZOrder"];
mt["SetScaleX"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setScaleX);
mt["set"]["ScaleX"]=mt["SetScaleX"];
mt["GetScaleX"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getScaleX);
mt["get"]["ScaleX"]=mt["GetScaleX"];
mt["SetScaleY"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setScaleY);
mt["set"]["ScaleY"]=mt["SetScaleY"];
mt["GetScaleY"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getScaleY);
mt["get"]["ScaleY"]=mt["GetScaleY"];
mt["SetScaleZ"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setScaleZ);
mt["set"]["ScaleZ"]=mt["SetScaleZ"];
mt["GetScaleZ"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getScaleZ);
mt["get"]["ScaleZ"]=mt["GetScaleZ"];
mt["SetScale"]=sol::overload(static_cast<void(cocos2d::Node::*)(float,float)>(&cocos2d::Node::setScale),static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setScale));
mt["set"]["Scale"]=mt["SetScale"];
mt["GetScale"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getScale);
mt["get"]["Scale"]=mt["GetScale"];
mt["SetPosition"]=sol::overload(static_cast<void(cocos2d::Node::*)(float,float)>(&cocos2d::Node::setPosition),static_cast<void(cocos2d::Node::*)(const cocos2d::Vec2&)>(&cocos2d::Node::setPosition));
mt["set"]["Position"]=mt["SetPosition"];
mt["SetPositionNormalized"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Vec2&)>(&cocos2d::Node::setPositionNormalized);
mt["set"]["PositionNormalized"]=mt["SetPositionNormalized"];
mt["SetNormalizedPosition"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Vec2&)>(&cocos2d::Node::setNormalizedPosition);
mt["set"]["NormalizedPosition"]=mt["SetNormalizedPosition"];
mt["GetPosition"]=sol::overload(static_cast<void(cocos2d::Node::*)(float*,float*)const>(&cocos2d::Node::getPosition),static_cast<const cocos2d::Vec2&(cocos2d::Node::*)()const>(&cocos2d::Node::getPosition));
mt["get"]["Position"]=mt["GetPosition"];
mt["GetPositionXY"]=static_cast<const cocos2d::Vec2&(cocos2d::Node::*)()const>(&cocos2d::Node::getPositionXY);
mt["get"]["PositionXY"]=mt["GetPositionXY"];
mt["GetPositionNormalized"]=static_cast<const cocos2d::Vec2&(cocos2d::Node::*)()const>(&cocos2d::Node::getPositionNormalized);
mt["get"]["PositionNormalized"]=mt["GetPositionNormalized"];
mt["GetNormalizedPosition"]=static_cast<const cocos2d::Vec2&(cocos2d::Node::*)()const>(&cocos2d::Node::getNormalizedPosition);
mt["get"]["NormalizedPosition"]=mt["GetNormalizedPosition"];
mt["SetPositionX"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setPositionX);
mt["set"]["PositionX"]=mt["SetPositionX"];
mt["GetPositionX"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getPositionX);
mt["get"]["PositionX"]=mt["GetPositionX"];
mt["SetPositionY"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setPositionY);
mt["set"]["PositionY"]=mt["SetPositionY"];
mt["GetPositionY"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getPositionY);
mt["get"]["PositionY"]=mt["GetPositionY"];
mt["SetPosition3D"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Vec3&)>(&cocos2d::Node::setPosition3D);
mt["set"]["Position3D"]=mt["SetPosition3D"];
mt["GetPosition3D"]=static_cast<cocos2d::Vec3(cocos2d::Node::*)()const>(&cocos2d::Node::getPosition3D);
mt["get"]["Position3D"]=mt["GetPosition3D"];
mt["SetPositionZ"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setPositionZ);
mt["set"]["PositionZ"]=mt["SetPositionZ"];
mt["GetPositionZ"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getPositionZ);
mt["get"]["PositionZ"]=mt["GetPositionZ"];
mt["SetSkewX"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setSkewX);
mt["set"]["SkewX"]=mt["SetSkewX"];
mt["GetSkewX"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getSkewX);
mt["get"]["SkewX"]=mt["GetSkewX"];
mt["SetSkewY"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setSkewY);
mt["set"]["SkewY"]=mt["SetSkewY"];
mt["GetSkewY"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getSkewY);
mt["get"]["SkewY"]=mt["GetSkewY"];
mt["SetAnchorPoint"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Vec2&)>(&cocos2d::Node::setAnchorPoint);
mt["set"]["AnchorPoint"]=mt["SetAnchorPoint"];
mt["GetAnchorPoint"]=static_cast<const cocos2d::Vec2&(cocos2d::Node::*)()const>(&cocos2d::Node::getAnchorPoint);
mt["get"]["AnchorPoint"]=mt["GetAnchorPoint"];
mt["GetAnchorPointInPoints"]=static_cast<const cocos2d::Vec2&(cocos2d::Node::*)()const>(&cocos2d::Node::getAnchorPointInPoints);
mt["get"]["AnchorPointInPoints"]=mt["GetAnchorPointInPoints"];
mt["SetContentSize"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Size&)>(&cocos2d::Node::setContentSize);
mt["set"]["ContentSize"]=mt["SetContentSize"];
mt["GetContentSize"]=static_cast<const cocos2d::Size&(cocos2d::Node::*)()const>(&cocos2d::Node::getContentSize);
mt["get"]["ContentSize"]=mt["GetContentSize"];
mt["GetContentWidth"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getContentWidth);
mt["get"]["ContentWidth"]=mt["GetContentWidth"];
mt["GetContentHeight"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getContentHeight);
mt["get"]["ContentHeight"]=mt["GetContentHeight"];
mt["SetContentWidth"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setContentWidth);
mt["set"]["ContentWidth"]=mt["SetContentWidth"];
mt["SetContentHeight"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setContentHeight);
mt["set"]["ContentHeight"]=mt["SetContentHeight"];
mt["SetVisible"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::setVisible);
mt["set"]["Visible"]=mt["SetVisible"];
mt["IsVisible"]=static_cast<bool(cocos2d::Node::*)()const>(&cocos2d::Node::isVisible);
mt["get"]["Visible"]=mt["IsVisible"];
mt["SetRotation"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setRotation);
mt["set"]["Rotation"]=mt["SetRotation"];
mt["GetRotation"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getRotation);
mt["get"]["Rotation"]=mt["GetRotation"];
mt["SetRotation3D"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Vec3&)>(&cocos2d::Node::setRotation3D);
mt["set"]["Rotation3D"]=mt["SetRotation3D"];
mt["GetRotation3D"]=static_cast<cocos2d::Vec3(cocos2d::Node::*)()const>(&cocos2d::Node::getRotation3D);
mt["get"]["Rotation3D"]=mt["GetRotation3D"];
mt["SetRotationQuat"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Quaternion&)>(&cocos2d::Node::setRotationQuat);
mt["set"]["RotationQuat"]=mt["SetRotationQuat"];
mt["GetRotationQuat"]=static_cast<cocos2d::Quaternion(cocos2d::Node::*)()const>(&cocos2d::Node::getRotationQuat);
mt["get"]["RotationQuat"]=mt["GetRotationQuat"];
mt["SetRotationSkewX"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setRotationSkewX);
mt["set"]["RotationSkewX"]=mt["SetRotationSkewX"];
mt["GetRotationSkewX"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getRotationSkewX);
mt["get"]["RotationSkewX"]=mt["GetRotationSkewX"];
mt["SetRotationSkewY"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::setRotationSkewY);
mt["set"]["RotationSkewY"]=mt["SetRotationSkewY"];
mt["GetRotationSkewY"]=static_cast<float(cocos2d::Node::*)()const>(&cocos2d::Node::getRotationSkewY);
mt["get"]["RotationSkewY"]=mt["GetRotationSkewY"];
mt["SetIgnoreAnchorPointForPosition"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::setIgnoreAnchorPointForPosition);
mt["set"]["IgnoreAnchorPointForPosition"]=mt["SetIgnoreAnchorPointForPosition"];
mt["IsIgnoreAnchorPointForPosition"]=static_cast<bool(cocos2d::Node::*)()const>(&cocos2d::Node::isIgnoreAnchorPointForPosition);
mt["get"]["IgnoreAnchorPointForPosition"]=mt["IsIgnoreAnchorPointForPosition"];
mt["AddChild"]=sol::overload(static_cast<void(cocos2d::Node::*)(cocos2d::Node*,int,const std::string&)>(&cocos2d::Node::addChild),static_cast<void(cocos2d::Node::*)(cocos2d::Node*,int,int)>(&cocos2d::Node::addChild),static_cast<void(cocos2d::Node::*)(cocos2d::Node*,int)>(&cocos2d::Node::addChild),static_cast<void(cocos2d::Node::*)(cocos2d::Node*)>(&cocos2d::Node::addChild));
mt["GetChildByTag"]=static_cast<cocos2d::Node*(cocos2d::Node::*)(int)const>(&cocos2d::Node::getChildByTag);
mt["GetChildByName"]=static_cast<cocos2d::Node*(cocos2d::Node::*)(const std::string&)const>(&cocos2d::Node::getChildByName);
mt["EnumerateChildren"]=static_cast<void(cocos2d::Node::*)(const std::string&,std::function<bool (cocos2d::Node *)>)const>(&cocos2d::Node::enumerateChildren);
mt["GetChildren"]=static_cast<cocos2d::Vector<cocos2d::Node *>&(cocos2d::Node::*)()>(&cocos2d::Node::getChildren);
mt["get"]["Children"]=mt["GetChildren"];
mt["GetChildrenCount"]=static_cast<ssize_t(cocos2d::Node::*)()const>(&cocos2d::Node::getChildrenCount);
mt["get"]["ChildrenCount"]=mt["GetChildrenCount"];
mt["SetParent"]=static_cast<void(cocos2d::Node::*)(cocos2d::Node*)>(&cocos2d::Node::setParent);
mt["set"]["Parent"]=mt["SetParent"];
mt["GetParent"]=static_cast<cocos2d::Node*(cocos2d::Node::*)()>(&cocos2d::Node::getParent);
mt["get"]["Parent"]=mt["GetParent"];
mt["RemoveFromParent"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::removeFromParent);
mt["RemoveFromParentAndCleanup"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::removeFromParentAndCleanup);
mt["RemoveChild"]=sol::overload([](cocos2d::Node* obj,cocos2d::Node* arg0,bool arg1){return obj->removeChild(arg0,arg1);},[](cocos2d::Node* obj,cocos2d::Node* arg0){return obj->removeChild(arg0);});
mt["RemoveChildByTag"]=sol::overload([](cocos2d::Node* obj,int arg0,bool arg1){return obj->removeChildByTag(arg0,arg1);},[](cocos2d::Node* obj,int arg0){return obj->removeChildByTag(arg0);});
mt["RemoveChildByName"]=sol::overload([](cocos2d::Node* obj,const std::string& arg0,bool arg1){return obj->removeChildByName(arg0,arg1);},[](cocos2d::Node* obj,const std::string& arg0){return obj->removeChildByName(arg0);});
mt["RemoveAllChildren"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::removeAllChildren);
mt["RemoveAllChildrenWithCleanup"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::removeAllChildrenWithCleanup);
mt["ReorderChild"]=static_cast<void(cocos2d::Node::*)(cocos2d::Node*,int)>(&cocos2d::Node::reorderChild);
mt["SortAllChildren"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::sortAllChildren);
mt["GetTag"]=static_cast<int(cocos2d::Node::*)()const>(&cocos2d::Node::getTag);
mt["get"]["Tag"]=mt["GetTag"];
mt["SetTag"]=static_cast<void(cocos2d::Node::*)(int)>(&cocos2d::Node::setTag);
mt["set"]["Tag"]=mt["SetTag"];
mt["GetName"]=static_cast<const std::string&(cocos2d::Node::*)()const>(&cocos2d::Node::getName);
mt["get"]["Name"]=mt["GetName"];
mt["SetName"]=static_cast<void(cocos2d::Node::*)(const std::string&)>(&cocos2d::Node::setName);
mt["set"]["Name"]=mt["SetName"];
mt["GetUserData"]=static_cast<void*(cocos2d::Node::*)()>(&cocos2d::Node::getUserData);
mt["get"]["UserData"]=mt["GetUserData"];
mt["SetUserData"]=static_cast<void(cocos2d::Node::*)(void*)>(&cocos2d::Node::setUserData);
mt["set"]["UserData"]=mt["SetUserData"];
mt["GetUserObject"]=static_cast<cocos2d::Ref*(cocos2d::Node::*)()>(&cocos2d::Node::getUserObject);
mt["get"]["UserObject"]=mt["GetUserObject"];
mt["SetUserObject"]=static_cast<void(cocos2d::Node::*)(cocos2d::Ref*)>(&cocos2d::Node::setUserObject);
mt["set"]["UserObject"]=mt["SetUserObject"];
mt["IsRunning"]=static_cast<bool(cocos2d::Node::*)()const>(&cocos2d::Node::isRunning);
mt["get"]["Running"]=mt["IsRunning"];
mt["Cleanup"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::cleanup);
mt["Draw"]=sol::overload(static_cast<void(cocos2d::Node::*)(cocos2d::Renderer*,const cocos2d::Mat4&,uint32_t)>(&cocos2d::Node::draw),static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::draw));
mt["Visit"]=sol::overload(static_cast<void(cocos2d::Node::*)(cocos2d::Renderer*,const cocos2d::Mat4&,uint32_t)>(&cocos2d::Node::visit),static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::visit));
mt["GetScene"]=static_cast<cocos2d::Scene*(cocos2d::Node::*)()const>(&cocos2d::Node::getScene);
mt["get"]["Scene"]=mt["GetScene"];
mt["GetBoundingBox"]=static_cast<cocos2d::Rect(cocos2d::Node::*)()const>(&cocos2d::Node::getBoundingBox);
mt["get"]["BoundingBox"]=mt["GetBoundingBox"];
mt["SetEventDispatcher"]=static_cast<void(cocos2d::Node::*)(cocos2d::EventDispatcher*)>(&cocos2d::Node::setEventDispatcher);
mt["set"]["EventDispatcher"]=mt["SetEventDispatcher"];
mt["GetEventDispatcher"]=static_cast<cocos2d::EventDispatcher*(cocos2d::Node::*)()const>(&cocos2d::Node::getEventDispatcher);
mt["get"]["EventDispatcher"]=mt["GetEventDispatcher"];
mt["SetActionManager"]=static_cast<void(cocos2d::Node::*)(cocos2d::ActionManager*)>(&cocos2d::Node::setActionManager);
mt["set"]["ActionManager"]=mt["SetActionManager"];
mt["GetActionManager"]=static_cast<cocos2d::ActionManager*(cocos2d::Node::*)()>(&cocos2d::Node::getActionManager);
mt["get"]["ActionManager"]=mt["GetActionManager"];
mt["RunAction"]=static_cast<cocos2d::Action*(cocos2d::Node::*)(cocos2d::Action*)>(&cocos2d::Node::runAction);
mt["StopAllActions"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::stopAllActions);
mt["StopAction"]=static_cast<void(cocos2d::Node::*)(cocos2d::Action*)>(&cocos2d::Node::stopAction);
mt["StopActionByTag"]=static_cast<void(cocos2d::Node::*)(int)>(&cocos2d::Node::stopActionByTag);
mt["StopAllActionsByTag"]=static_cast<void(cocos2d::Node::*)(int)>(&cocos2d::Node::stopAllActionsByTag);
mt["StopActionsByFlags"]=static_cast<void(cocos2d::Node::*)(unsigned int)>(&cocos2d::Node::stopActionsByFlags);
mt["GetActionByTag"]=static_cast<cocos2d::Action*(cocos2d::Node::*)(int)>(&cocos2d::Node::getActionByTag);
mt["GetNumberOfRunningActions"]=static_cast<ssize_t(cocos2d::Node::*)()const>(&cocos2d::Node::getNumberOfRunningActions);
mt["get"]["NumberOfRunningActions"]=mt["GetNumberOfRunningActions"];
mt["GetNumberOfRunningActionsByTag"]=static_cast<ssize_t(cocos2d::Node::*)(int)const>(&cocos2d::Node::getNumberOfRunningActionsByTag);
mt["SetScheduler"]=static_cast<void(cocos2d::Node::*)(cocos2d::Scheduler*)>(&cocos2d::Node::setScheduler);
mt["set"]["Scheduler"]=mt["SetScheduler"];
mt["GetScheduler"]=static_cast<cocos2d::Scheduler*(cocos2d::Node::*)()>(&cocos2d::Node::getScheduler);
mt["get"]["Scheduler"]=mt["GetScheduler"];
mt["IsScheduled"]=sol::overload(static_cast<bool(cocos2d::Node::*)(const std::string&)const>(&cocos2d::Node::isScheduled),static_cast<bool(cocos2d::Node::*)(cocos2d::SEL_SCHEDULE)const>(&cocos2d::Node::isScheduled));
mt["ScheduleUpdate"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::scheduleUpdate);
mt["ScheduleUpdateWithPriority"]=static_cast<void(cocos2d::Node::*)(int)>(&cocos2d::Node::scheduleUpdateWithPriority);
mt["UnscheduleUpdate"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::unscheduleUpdate);
mt["Schedule"]=sol::overload(static_cast<void(cocos2d::Node::*)(const std::function<void (float)>&,float,unsigned int,float,const std::string&)>(&cocos2d::Node::schedule),static_cast<void(cocos2d::Node::*)(cocos2d::SEL_SCHEDULE,float,unsigned int,float)>(&cocos2d::Node::schedule),static_cast<void(cocos2d::Node::*)(const std::function<void (float)>&,float,const std::string&)>(&cocos2d::Node::schedule),static_cast<void(cocos2d::Node::*)(const std::function<void (float)>&,const std::string&)>(&cocos2d::Node::schedule),static_cast<void(cocos2d::Node::*)(cocos2d::SEL_SCHEDULE,float)>(&cocos2d::Node::schedule),static_cast<void(cocos2d::Node::*)(cocos2d::SEL_SCHEDULE)>(&cocos2d::Node::schedule));
mt["ScheduleOnce"]=sol::overload(static_cast<void(cocos2d::Node::*)(const std::function<void (float)>&,float,const std::string&)>(&cocos2d::Node::scheduleOnce),static_cast<void(cocos2d::Node::*)(cocos2d::SEL_SCHEDULE,float)>(&cocos2d::Node::scheduleOnce));
mt["Unschedule"]=sol::overload(static_cast<void(cocos2d::Node::*)(const std::string&)>(&cocos2d::Node::unschedule),static_cast<void(cocos2d::Node::*)(cocos2d::SEL_SCHEDULE)>(&cocos2d::Node::unschedule));
mt["UnscheduleAllCallbacks"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::unscheduleAllCallbacks);
mt["Resume"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::resume);
mt["Pause"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::pause);
mt["Update"]=static_cast<void(cocos2d::Node::*)(float)>(&cocos2d::Node::update);
mt["UpdateTransform"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::updateTransform);
mt["GetNodeToParentTransform"]=sol::overload(static_cast<cocos2d::Mat4(cocos2d::Node::*)(cocos2d::Node*)const>(&cocos2d::Node::getNodeToParentTransform),static_cast<const cocos2d::Mat4&(cocos2d::Node::*)()const>(&cocos2d::Node::getNodeToParentTransform));
mt["get"]["NodeToParentTransform"]=mt["GetNodeToParentTransform"];
mt["GetNodeToParentAffineTransform"]=sol::overload(static_cast<cocos2d::AffineTransform(cocos2d::Node::*)(cocos2d::Node*)const>(&cocos2d::Node::getNodeToParentAffineTransform),static_cast<cocos2d::AffineTransform(cocos2d::Node::*)()const>(&cocos2d::Node::getNodeToParentAffineTransform));
mt["get"]["NodeToParentAffineTransform"]=mt["GetNodeToParentAffineTransform"];
mt["SetNodeToParentTransform"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Mat4&)>(&cocos2d::Node::setNodeToParentTransform);
mt["set"]["NodeToParentTransform"]=mt["SetNodeToParentTransform"];
mt["GetParentToNodeTransform"]=static_cast<const cocos2d::Mat4&(cocos2d::Node::*)()const>(&cocos2d::Node::getParentToNodeTransform);
mt["get"]["ParentToNodeTransform"]=mt["GetParentToNodeTransform"];
mt["GetParentToNodeAffineTransform"]=static_cast<cocos2d::AffineTransform(cocos2d::Node::*)()const>(&cocos2d::Node::getParentToNodeAffineTransform);
mt["get"]["ParentToNodeAffineTransform"]=mt["GetParentToNodeAffineTransform"];
mt["GetNodeToWorldTransform"]=static_cast<cocos2d::Mat4(cocos2d::Node::*)()const>(&cocos2d::Node::getNodeToWorldTransform);
mt["get"]["NodeToWorldTransform"]=mt["GetNodeToWorldTransform"];
mt["GetNodeToWorldAffineTransform"]=static_cast<cocos2d::AffineTransform(cocos2d::Node::*)()const>(&cocos2d::Node::getNodeToWorldAffineTransform);
mt["get"]["NodeToWorldAffineTransform"]=mt["GetNodeToWorldAffineTransform"];
mt["GetWorldToNodeTransform"]=static_cast<cocos2d::Mat4(cocos2d::Node::*)()const>(&cocos2d::Node::getWorldToNodeTransform);
mt["get"]["WorldToNodeTransform"]=mt["GetWorldToNodeTransform"];
mt["GetWorldToNodeAffineTransform"]=static_cast<cocos2d::AffineTransform(cocos2d::Node::*)()const>(&cocos2d::Node::getWorldToNodeAffineTransform);
mt["get"]["WorldToNodeAffineTransform"]=mt["GetWorldToNodeAffineTransform"];
mt["ConvertToNodeSpace"]=static_cast<cocos2d::Vec2(cocos2d::Node::*)(const cocos2d::Vec2&)const>(&cocos2d::Node::convertToNodeSpace);
mt["ConvertToWorldSpace"]=static_cast<cocos2d::Vec2(cocos2d::Node::*)(const cocos2d::Vec2&)const>(&cocos2d::Node::convertToWorldSpace);
mt["ConvertToNodeSpaceAR"]=static_cast<cocos2d::Vec2(cocos2d::Node::*)(const cocos2d::Vec2&)const>(&cocos2d::Node::convertToNodeSpaceAR);
mt["ConvertToWorldSpaceAR"]=static_cast<cocos2d::Vec2(cocos2d::Node::*)(const cocos2d::Vec2&)const>(&cocos2d::Node::convertToWorldSpaceAR);
mt["ConvertTouchToNodeSpace"]=static_cast<cocos2d::Vec2(cocos2d::Node::*)(cocos2d::Touch*)const>(&cocos2d::Node::convertTouchToNodeSpace);
mt["ConvertTouchToNodeSpaceAR"]=static_cast<cocos2d::Vec2(cocos2d::Node::*)(cocos2d::Touch*)const>(&cocos2d::Node::convertTouchToNodeSpaceAR);
mt["SetAdditionalTransform"]=sol::overload(static_cast<void(cocos2d::Node::*)(const cocos2d::AffineTransform&)>(&cocos2d::Node::setAdditionalTransform),static_cast<void(cocos2d::Node::*)(const cocos2d::Mat4&)>(&cocos2d::Node::setAdditionalTransform),static_cast<void(cocos2d::Node::*)(const cocos2d::Mat4*)>(&cocos2d::Node::setAdditionalTransform));
mt["set"]["AdditionalTransform"]=mt["SetAdditionalTransform"];
mt["GetComponent"]=static_cast<cocos2d::Component*(cocos2d::Node::*)(const std::string&)>(&cocos2d::Node::getComponent);
mt["AddComponent"]=static_cast<bool(cocos2d::Node::*)(cocos2d::Component*)>(&cocos2d::Node::addComponent);
mt["RemoveComponent"]=sol::overload(static_cast<bool(cocos2d::Node::*)(cocos2d::Component*)>(&cocos2d::Node::removeComponent),static_cast<bool(cocos2d::Node::*)(const std::string&)>(&cocos2d::Node::removeComponent));
mt["RemoveAllComponents"]=static_cast<void(cocos2d::Node::*)()>(&cocos2d::Node::removeAllComponents);
mt["GetOpacity"]=static_cast<uint8_t(cocos2d::Node::*)()const>(&cocos2d::Node::getOpacity);
mt["get"]["Opacity"]=mt["GetOpacity"];
mt["GetDisplayedOpacity"]=static_cast<uint8_t(cocos2d::Node::*)()const>(&cocos2d::Node::getDisplayedOpacity);
mt["get"]["DisplayedOpacity"]=mt["GetDisplayedOpacity"];
mt["SetOpacity"]=static_cast<void(cocos2d::Node::*)(uint8_t)>(&cocos2d::Node::setOpacity);
mt["set"]["Opacity"]=mt["SetOpacity"];
mt["UpdateDisplayedOpacity"]=static_cast<void(cocos2d::Node::*)(uint8_t)>(&cocos2d::Node::updateDisplayedOpacity);
mt["IsCascadeOpacityEnabled"]=static_cast<bool(cocos2d::Node::*)()const>(&cocos2d::Node::isCascadeOpacityEnabled);
mt["get"]["CascadeOpacityEnabled"]=mt["IsCascadeOpacityEnabled"];
mt["SetCascadeOpacityEnabled"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::setCascadeOpacityEnabled);
mt["set"]["CascadeOpacityEnabled"]=mt["SetCascadeOpacityEnabled"];
mt["GetColor"]=static_cast<const cocos2d::Color3B&(cocos2d::Node::*)()const>(&cocos2d::Node::getColor);
mt["get"]["Color"]=mt["GetColor"];
mt["GetDisplayedColor"]=static_cast<const cocos2d::Color3B&(cocos2d::Node::*)()const>(&cocos2d::Node::getDisplayedColor);
mt["get"]["DisplayedColor"]=mt["GetDisplayedColor"];
mt["SetColor"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Color3B&)>(&cocos2d::Node::setColor);
mt["set"]["Color"]=mt["SetColor"];
mt["UpdateDisplayedColor"]=static_cast<void(cocos2d::Node::*)(const cocos2d::Color3B&)>(&cocos2d::Node::updateDisplayedColor);
mt["IsCascadeColorEnabled"]=static_cast<bool(cocos2d::Node::*)()const>(&cocos2d::Node::isCascadeColorEnabled);
mt["get"]["CascadeColorEnabled"]=mt["IsCascadeColorEnabled"];
mt["SetCascadeColorEnabled"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::setCascadeColorEnabled);
mt["set"]["CascadeColorEnabled"]=mt["SetCascadeColorEnabled"];
mt["SetOpacityModifyRGB"]=static_cast<void(cocos2d::Node::*)(bool)>(&cocos2d::Node::setOpacityModifyRGB);
mt["set"]["OpacityModifyRGB"]=mt["SetOpacityModifyRGB"];
mt["IsOpacityModifyRGB"]=static_cast<bool(cocos2d::Node::*)()const>(&cocos2d::Node::isOpacityModifyRGB);
mt["get"]["OpacityModifyRGB"]=mt["IsOpacityModifyRGB"];
mt["SetEnterHandler"]=static_cast<void(cocos2d::Node::*)(const std::function<void (cocos2d::Node *)>&)>(&cocos2d::Node::SetEnterHandler);
mt["set"]["EnterHandler"]=mt["SetEnterHandler"];
mt["SetExitHandler"]=static_cast<void(cocos2d::Node::*)(const std::function<void (cocos2d::Node *)>&)>(&cocos2d::Node::SetExitHandler);
mt["set"]["ExitHandler"]=mt["SetExitHandler"];
mt["SetEnterTransitionDidFinishHandler"]=static_cast<void(cocos2d::Node::*)(const std::function<void (cocos2d::Node *)>&)>(&cocos2d::Node::SetEnterTransitionDidFinishHandler);
mt["set"]["EnterTransitionDidFinishHandler"]=mt["SetEnterTransitionDidFinishHandler"];
mt["SetExitTransitionDidStartHandler"]=static_cast<void(cocos2d::Node::*)(const std::function<void (cocos2d::Node *)>&)>(&cocos2d::Node::SetExitTransitionDidStartHandler);
mt["set"]["ExitTransitionDidStartHandler"]=mt["SetExitTransitionDidStartHandler"];
mt["SetCleanUpHandler"]=static_cast<void(cocos2d::Node::*)(const std::function<void (cocos2d::Node *)>&)>(&cocos2d::Node::SetCleanUpHandler);
mt["set"]["CleanUpHandler"]=mt["SetCleanUpHandler"];
mt["SetUpdateHandler"]=static_cast<void(cocos2d::Node::*)(const std::function<void (cocos2d::Node *)>&)>(&cocos2d::Node::SetUpdateHandler);
mt["set"]["UpdateHandler"]=mt["SetUpdateHandler"];
mt["GetCameraMask"]=static_cast<unsigned short(cocos2d::Node::*)()const>(&cocos2d::Node::getCameraMask);
mt["get"]["CameraMask"]=mt["GetCameraMask"];
mt["SetCameraMask"]=sol::overload([](cocos2d::Node* obj,unsigned short arg0,bool arg1){return obj->setCameraMask(arg0,arg1);},[](cocos2d::Node* obj,unsigned short arg0){return obj->setCameraMask(arg0);});
mt["set"]["CameraMask"]=mt["SetCameraMask"];
mt["SetProgramState"]=sol::overload([](cocos2d::Node* obj,cocos2d::backend::ProgramState* arg0,bool arg1){return obj->setProgramState(arg0,arg1);},[](cocos2d::Node* obj,cocos2d::backend::ProgramState* arg0){return obj->setProgramState(arg0);},static_cast<void(cocos2d::Node::*)(uint32_t)>(&cocos2d::Node::setProgramState));
mt["set"]["ProgramState"]=mt["SetProgramState"];
mt["SetProgramStateWithRegistry"]=static_cast<void(cocos2d::Node::*)(uint32_t,cocos2d::Texture2D*)>(&cocos2d::Node::setProgramStateWithRegistry);
mt["GetProgramState"]=static_cast<cocos2d::backend::ProgramState*(cocos2d::Node::*)()const>(&cocos2d::Node::getProgramState);
mt["get"]["ProgramState"]=mt["GetProgramState"];
mt["UpdateProgramStateTexture"]=static_cast<void(cocos2d::Node::*)(cocos2d::Texture2D*)>(&cocos2d::Node::updateProgramStateTexture);
mt["SetPhysicsBody"]=static_cast<void(cocos2d::Node::*)(cocos2d::PhysicsBody*)>(&cocos2d::Node::setPhysicsBody);
mt["set"]["PhysicsBody"]=mt["SetPhysicsBody"];
mt["GetPhysicsBody"]=static_cast<cocos2d::PhysicsBody*(cocos2d::Node::*)()const>(&cocos2d::Node::getPhysicsBody);
mt["get"]["PhysicsBody"]=mt["GetPhysicsBody"];
mt["get"]["INVALID_TAG"]=[](){return cocos2d::Node::INVALID_TAG;};;
mt["get"]["AttachedNodeCount"]=[](){return cocos2d::Node::__attachedNodeCount;};;
RegisterLuaCoreNode_AE_fbd064b4c8d215365796c22d16742590_Auto(lua);
}
void RegisterLuaCoreSceneAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::Scene).name()] = sol::usertype_traits<cocos2d::Scene*>::metatable();
auto dep=lua.new_usertype<cocos2d::Scene>("deprecated.cocos2d::Scene");
dep[sol::base_classes]=sol::bases<cocos2d::Node,cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::Scene*>::metatable(),sol::usertype_traits<cocos2d::Node*>::metatable());
lua["cc"]["Scene"]=mt;
mt["__new__"]=static_cast<cocos2d::Scene*(*)()>(&cocos2d::Scene::create);
mt["static"]["CreateWithSize"]=static_cast<cocos2d::Scene*(*)(const cocos2d::Size&)>(&cocos2d::Scene::createWithSize);
mt["GetCameras"]=static_cast<const std::vector<cocos2d::Camera *, std::allocator<cocos2d::Camera *> >&(cocos2d::Scene::*)()>(&cocos2d::Scene::getCameras);
mt["get"]["Cameras"]=mt["GetCameras"];
mt["GetDefaultCamera"]=static_cast<cocos2d::Camera*(cocos2d::Scene::*)()const>(&cocos2d::Scene::getDefaultCamera);
mt["get"]["DefaultCamera"]=mt["GetDefaultCamera"];
mt["GetLights"]=static_cast<const std::vector<cocos2d::BaseLight *, std::allocator<cocos2d::BaseLight *> >&(cocos2d::Scene::*)()const>(&cocos2d::Scene::getLights);
mt["get"]["Lights"]=mt["GetLights"];
mt["Render"]=sol::overload([](cocos2d::Scene* obj,cocos2d::Renderer* arg0,const cocos2d::Mat4& arg1,const cocos2d::Mat4* arg2){return obj->render(arg0,arg1,arg2);},[](cocos2d::Scene* obj,cocos2d::Renderer* arg0,const cocos2d::Mat4& arg1){return obj->render(arg0,arg1);});
mt["GetPhysicsWorld"]=static_cast<cocos2d::PhysicsWorld*(cocos2d::Scene::*)()const>(&cocos2d::Scene::getPhysicsWorld);
mt["get"]["PhysicsWorld"]=mt["GetPhysicsWorld"];
mt["static"]["CreateWithPhysics"]=static_cast<cocos2d::Scene*(*)()>(&cocos2d::Scene::createWithPhysics);
mt["SetNavMesh"]=static_cast<void(cocos2d::Scene::*)(cocos2d::NavMesh*)>(&cocos2d::Scene::setNavMesh);
mt["set"]["NavMesh"]=mt["SetNavMesh"];
mt["GetNavMesh"]=static_cast<cocos2d::NavMesh*(cocos2d::Scene::*)()const>(&cocos2d::Scene::getNavMesh);
mt["get"]["NavMesh"]=mt["GetNavMesh"];
mt["SetNavMeshDebugCamera"]=static_cast<void(cocos2d::Scene::*)(cocos2d::Camera*)>(&cocos2d::Scene::setNavMeshDebugCamera);
mt["set"]["NavMeshDebugCamera"]=mt["SetNavMeshDebugCamera"];
mt["StepPhysicsAndNavigation"]=static_cast<void(cocos2d::Scene::*)(float)>(&cocos2d::Scene::stepPhysicsAndNavigation);
}
void RegisterLuaCoreEventTypeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,7);
enumTable["TOUCH"]=cocos2d::Event::Type::TOUCH;
enumTable["KEYBOARD"]=cocos2d::Event::Type::KEYBOARD;
enumTable["ACCELERATION"]=cocos2d::Event::Type::ACCELERATION;
enumTable["MOUSE"]=cocos2d::Event::Type::MOUSE;
enumTable["FOCUS"]=cocos2d::Event::Type::FOCUS;
enumTable["GAME_CONTROLLER"]=cocos2d::Event::Type::GAME_CONTROLLER;
enumTable["CUSTOM"]=cocos2d::Event::Type::CUSTOM;
lua["cc"]["Event"]["static"]["Type"]=lua.NewEnum(enumTable);
}
void RegisterLuaCoreEventAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::Event).name()] = sol::usertype_traits<cocos2d::Event*>::metatable();
auto dep=lua.new_usertype<cocos2d::Event>("deprecated.cocos2d::Event");
dep[sol::base_classes]=sol::bases<cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::Event*>::metatable(),sol::usertype_traits<cocos2d::Ref*>::metatable());
lua["cc"]["Event"]=mt;
mt["__new__"] = [](){return nullptr;};
mt["GetType"]=static_cast<cocos2d::Event::Type(cocos2d::Event::*)()const>(&cocos2d::Event::getType);
mt["get"]["Type"]=mt["GetType"];
mt["StopPropagation"]=static_cast<void(cocos2d::Event::*)()>(&cocos2d::Event::stopPropagation);
mt["IsStopped"]=static_cast<bool(cocos2d::Event::*)()const>(&cocos2d::Event::isStopped);
mt["get"]["Stopped"]=mt["IsStopped"];
mt["GetCurrentTarget"]=static_cast<cocos2d::Node*(cocos2d::Event::*)()>(&cocos2d::Event::getCurrentTarget);
mt["get"]["CurrentTarget"]=mt["GetCurrentTarget"];
RegisterLuaCoreEventTypeAuto(lua);
}
void RegisterLuaCoreEventTouchEventCodeAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,4);
enumTable["BEGAN"]=cocos2d::EventTouch::EventCode::BEGAN;
enumTable["MOVED"]=cocos2d::EventTouch::EventCode::MOVED;
enumTable["ENDED"]=cocos2d::EventTouch::EventCode::ENDED;
enumTable["CANCELLED"]=cocos2d::EventTouch::EventCode::CANCELLED;
lua["cc"]["EventTouch"]["static"]["EventCode"]=lua.NewEnum(enumTable);
}
void RegisterLuaCoreEventTouchAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::EventTouch).name()] = sol::usertype_traits<cocos2d::EventTouch*>::metatable();
auto dep=lua.new_usertype<cocos2d::EventTouch>("deprecated.cocos2d::EventTouch");
dep[sol::base_classes]=sol::bases<cocos2d::Event,cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::EventTouch*>::metatable(),sol::usertype_traits<cocos2d::Event*>::metatable());
lua["cc"]["EventTouch"]=mt;
mt["__new__"]=[](){return new cocos2d::EventTouch();};
mt["GetEventCode"]=static_cast<cocos2d::EventTouch::EventCode(cocos2d::EventTouch::*)()const>(&cocos2d::EventTouch::getEventCode);
mt["get"]["EventCode"]=mt["GetEventCode"];
mt["GetTouches"]=static_cast<const std::vector<cocos2d::Touch *, std::allocator<cocos2d::Touch *> >&(cocos2d::EventTouch::*)()const>(&cocos2d::EventTouch::getTouches);
mt["get"]["Touches"]=mt["GetTouches"];
mt["SetEventCode"]=static_cast<void(cocos2d::EventTouch::*)(cocos2d::EventTouch::EventCode)>(&cocos2d::EventTouch::setEventCode);
mt["set"]["EventCode"]=mt["SetEventCode"];
mt["SetTouches"]=static_cast<void(cocos2d::EventTouch::*)(const std::vector<cocos2d::Touch *, std::allocator<cocos2d::Touch *> >&)>(&cocos2d::EventTouch::setTouches);
mt["set"]["Touches"]=mt["SetTouches"];
mt["get"]["MAX_TOUCHES"]=[](){return cocos2d::EventTouch::MAX_TOUCHES;};;
RegisterLuaCoreEventTouchEventCodeAuto(lua);
}
void RegisterLuaCoreResolutionPolicyAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,6);
enumTable["EXACT_FIT"]=cocos2d::ResolutionPolicy::EXACT_FIT;
enumTable["NO_BORDER"]=cocos2d::ResolutionPolicy::NO_BORDER;
enumTable["SHOW_ALL"]=cocos2d::ResolutionPolicy::SHOW_ALL;
enumTable["FIXED_HEIGHT"]=cocos2d::ResolutionPolicy::FIXED_HEIGHT;
enumTable["FIXED_WIDTH"]=cocos2d::ResolutionPolicy::FIXED_WIDTH;
enumTable["UNKNOWN"]=cocos2d::ResolutionPolicy::UNKNOWN;
lua["cc"]["ResolutionPolicy"]=lua.NewEnum(enumTable);
}
void RegisterLuaCoreGLViewAuto(cocos2d::extension::Lua& lua){
cocos2d::extension::Lua::Id2Meta[typeid(cocos2d::GLView).name()] = sol::usertype_traits<cocos2d::GLView*>::metatable();
auto dep=lua.new_usertype<cocos2d::GLView>("deprecated.cocos2d::GLView");
dep[sol::base_classes]=sol::bases<cocos2d::Ref,cocos2d::extension::LuaObject>();
sol::table mt=lua.NewClass(sol::usertype_traits<cocos2d::GLView*>::metatable(),sol::usertype_traits<cocos2d::Ref*>::metatable());
lua["cc"]["GLView"]=mt;
mt["__new__"] = [](){return nullptr;};
mt["End"]=static_cast<void(cocos2d::GLView::*)()>(&cocos2d::GLView::end);
mt["IsOpenGLReady"]=static_cast<bool(cocos2d::GLView::*)()>(&cocos2d::GLView::isOpenGLReady);
mt["get"]["OpenGLReady"]=mt["IsOpenGLReady"];
mt["SwapBuffers"]=static_cast<void(cocos2d::GLView::*)()>(&cocos2d::GLView::swapBuffers);
mt["SetIMEKeyboardState"]=static_cast<void(cocos2d::GLView::*)(bool)>(&cocos2d::GLView::setIMEKeyboardState);
mt["set"]["IMEKeyboardState"]=mt["SetIMEKeyboardState"];
mt["WindowShouldClose"]=static_cast<bool(cocos2d::GLView::*)()>(&cocos2d::GLView::windowShouldClose);
mt["static"]["SetGLContextAttrs"]=static_cast<void(*)(GLContextAttrs&)>(&cocos2d::GLView::setGLContextAttrs);
mt["static"]["set"]["GLContextAttrs"]=mt["SetGLContextAttrs"];
mt["static"]["GetGLContextAttrs"]=static_cast<GLContextAttrs(*)()>(&cocos2d::GLView::getGLContextAttrs);
mt["static"]["get"]["GLContextAttrs"]=mt["GetGLContextAttrs"];
mt["PollEvents"]=static_cast<void(cocos2d::GLView::*)()>(&cocos2d::GLView::pollEvents);
mt["GetFrameSize"]=static_cast<cocos2d::Size(cocos2d::GLView::*)()const>(&cocos2d::GLView::getFrameSize);
mt["get"]["FrameSize"]=mt["GetFrameSize"];
mt["SetFrameSize"]=sol::overload(static_cast<void(cocos2d::GLView::*)(float,float)>(&cocos2d::GLView::setFrameSize),static_cast<void(cocos2d::GLView::*)(const cocos2d::Size&)>(&cocos2d::GLView::setFrameSize));
mt["set"]["FrameSize"]=mt["SetFrameSize"];
mt["SetFrameZoomFactor"]=static_cast<void(cocos2d::GLView::*)(float)>(&cocos2d::GLView::setFrameZoomFactor);
mt["set"]["FrameZoomFactor"]=mt["SetFrameZoomFactor"];
mt["GetFrameZoomFactor"]=static_cast<float(cocos2d::GLView::*)()const>(&cocos2d::GLView::getFrameZoomFactor);
mt["get"]["FrameZoomFactor"]=mt["GetFrameZoomFactor"];
mt["SetCursorVisible"]=static_cast<void(cocos2d::GLView::*)(bool)>(&cocos2d::GLView::setCursorVisible);
mt["set"]["CursorVisible"]=mt["SetCursorVisible"];
mt["GetRetinaFactor"]=static_cast<int(cocos2d::GLView::*)()const>(&cocos2d::GLView::getRetinaFactor);
mt["get"]["RetinaFactor"]=mt["GetRetinaFactor"];
mt["SetContentScaleFactor"]=static_cast<bool(cocos2d::GLView::*)(float)>(&cocos2d::GLView::setContentScaleFactor);
mt["set"]["ContentScaleFactor"]=mt["SetContentScaleFactor"];
mt["GetContentScaleFactor"]=static_cast<float(cocos2d::GLView::*)()const>(&cocos2d::GLView::getContentScaleFactor);
mt["get"]["ContentScaleFactor"]=mt["GetContentScaleFactor"];
mt["IsRetinaDisplay"]=static_cast<bool(cocos2d::GLView::*)()const>(&cocos2d::GLView::isRetinaDisplay);
mt["get"]["RetinaDisplay"]=mt["IsRetinaDisplay"];
mt["GetVisibleSize"]=static_cast<cocos2d::Size(cocos2d::GLView::*)()const>(&cocos2d::GLView::getVisibleSize);
mt["get"]["VisibleSize"]=mt["GetVisibleSize"];
mt["GetVisibleOrigin"]=static_cast<cocos2d::Vec2(cocos2d::GLView::*)()const>(&cocos2d::GLView::getVisibleOrigin);
mt["get"]["VisibleOrigin"]=mt["GetVisibleOrigin"];
mt["GetVisibleRect"]=static_cast<cocos2d::Rect(cocos2d::GLView::*)()const>(&cocos2d::GLView::getVisibleRect);
mt["get"]["VisibleRect"]=mt["GetVisibleRect"];
mt["GetSafeAreaRect"]=static_cast<cocos2d::Rect(cocos2d::GLView::*)()const>(&cocos2d::GLView::getSafeAreaRect);
mt["get"]["SafeAreaRect"]=mt["GetSafeAreaRect"];
mt["SetDesignResolutionSize"]=static_cast<void(cocos2d::GLView::*)(float,float,cocos2d::ResolutionPolicy)>(&cocos2d::GLView::setDesignResolutionSize);
mt["GetDesignResolutionSize"]=static_cast<const cocos2d::Size&(cocos2d::GLView::*)()const>(&cocos2d::GLView::getDesignResolutionSize);
mt["get"]["DesignResolutionSize"]=mt["GetDesignResolutionSize"];
mt["SetViewPortInPoints"]=static_cast<void(cocos2d::GLView::*)(float,float,float,float)>(&cocos2d::GLView::setViewPortInPoints);
mt["SetScissorInPoints"]=static_cast<void(cocos2d::GLView::*)(float,float,float,float)>(&cocos2d::GLView::setScissorInPoints);
mt["IsScissorEnabled"]=static_cast<bool(cocos2d::GLView::*)()>(&cocos2d::GLView::isScissorEnabled);
mt["get"]["ScissorEnabled"]=mt["IsScissorEnabled"];
mt["GetScissorRect"]=static_cast<cocos2d::Rect(cocos2d::GLView::*)()const>(&cocos2d::GLView::getScissorRect);
mt["get"]["ScissorRect"]=mt["GetScissorRect"];
mt["SetViewName"]=static_cast<void(cocos2d::GLView::*)(const std::string&)>(&cocos2d::GLView::setViewName);
mt["set"]["ViewName"]=mt["SetViewName"];
mt["GetViewName"]=static_cast<const std::string&(cocos2d::GLView::*)()const>(&cocos2d::GLView::getViewName);
mt["get"]["ViewName"]=mt["GetViewName"];
mt["HandleTouchesBegin"]=static_cast<void(cocos2d::GLView::*)(int,intptr_t [],float [],float [])>(&cocos2d::GLView::handleTouchesBegin);
mt["HandleTouchesMove"]=sol::overload(static_cast<void(cocos2d::GLView::*)(int,intptr_t [],float [],float [],float [],float [])>(&cocos2d::GLView::handleTouchesMove),static_cast<void(cocos2d::GLView::*)(int,intptr_t [],float [],float [])>(&cocos2d::GLView::handleTouchesMove));
mt["HandleTouchesEnd"]=static_cast<void(cocos2d::GLView::*)(int,intptr_t [],float [],float [])>(&cocos2d::GLView::handleTouchesEnd);
mt["HandleTouchesCancel"]=static_cast<void(cocos2d::GLView::*)(int,intptr_t [],float [],float [])>(&cocos2d::GLView::handleTouchesCancel);
mt["SetIcon"]=sol::overload(static_cast<void(cocos2d::GLView::*)(const std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&)const>(&cocos2d::GLView::setIcon),static_cast<void(cocos2d::GLView::*)(const std::string&)const>(&cocos2d::GLView::setIcon));
mt["set"]["Icon"]=mt["SetIcon"];
mt["SetDefaultIcon"]=static_cast<void(cocos2d::GLView::*)()const>(&cocos2d::GLView::setDefaultIcon);
mt["GetViewPortRect"]=static_cast<const cocos2d::Rect&(cocos2d::GLView::*)()const>(&cocos2d::GLView::getViewPortRect);
mt["get"]["ViewPortRect"]=mt["GetViewPortRect"];
mt["GetAllTouches"]=static_cast<std::vector<cocos2d::Touch *, std::allocator<cocos2d::Touch *> >(cocos2d::GLView::*)()const>(&cocos2d::GLView::getAllTouches);
mt["get"]["AllTouches"]=mt["GetAllTouches"];
mt["GetScaleX"]=static_cast<float(cocos2d::GLView::*)()const>(&cocos2d::GLView::getScaleX);
mt["get"]["ScaleX"]=mt["GetScaleX"];
mt["GetScaleY"]=static_cast<float(cocos2d::GLView::*)()const>(&cocos2d::GLView::getScaleY);
mt["get"]["ScaleY"]=mt["GetScaleY"];
mt["GetResolutionPolicy"]=static_cast<cocos2d::ResolutionPolicy(cocos2d::GLView::*)()const>(&cocos2d::GLView::getResolutionPolicy);
mt["get"]["ResolutionPolicy"]=mt["GetResolutionPolicy"];
mt["RenderScene"]=static_cast<void(cocos2d::GLView::*)(cocos2d::Scene*,cocos2d::Renderer*)>(&cocos2d::GLView::renderScene);
mt["get"]["GlContextAttrs"]=[](){return cocos2d::GLView::_glContextAttrs;};;
}
void RegisterLuaCoreMATRIX_STACK_TYPEAuto(cocos2d::extension::Lua& lua) {
sol::table enumTable = lua.create_table_with(0,3);
enumTable["MATRIX_STACK_MODELVIEW"]=cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_MODELVIEW;
enumTable["MATRIX_STACK_PROJECTION"]=cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_PROJECTION;
enumTable["MATRIX_STACK_TEXTURE"]=cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_TEXTURE;
lua["cc"]["MATRIX_STACK_TYPE"]=lua.NewEnum(enumTable);
}
